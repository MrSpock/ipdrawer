/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github.com_mwitkow_go$proto$validators_validator_pb = require('../github.com/mwitkow/go-proto-validators/validator_pb.js');
var github.com_gogo_protobuf_gogoproto_gogo_pb = require('../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.exportSymbol('proto.model.IPAddr', null, global);
goog.exportSymbol('proto.model.IPAddr.IPStatus', null, global);
goog.exportSymbol('proto.model.Network', null, global);
goog.exportSymbol('proto.model.Network.Status', null, global);
goog.exportSymbol('proto.model.Pool', null, global);
goog.exportSymbol('proto.model.Pool.Status', null, global);
goog.exportSymbol('proto.model.Tag', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Tag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.Tag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Tag.displayName = 'proto.model.Tag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Tag.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Tag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Tag} msg The msg instance to transform.
 * @return {!Object}
 */
proto.model.Tag.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Tag}
 */
proto.model.Tag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Tag;
  return proto.model.Tag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Tag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Tag}
 */
proto.model.Tag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Tag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Tag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Tag} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.model.Tag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.model.Tag.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.Tag.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.model.Tag.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.Tag.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Pool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.Pool.repeatedFields_, null);
};
goog.inherits(proto.model.Pool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Pool.displayName = 'proto.model.Pool';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.Pool.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Pool.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Pool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Pool} msg The msg instance to transform.
 * @return {!Object}
 */
proto.model.Pool.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: jspb.Message.getFieldWithDefault(msg, 1, ""),
    end: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.model.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Pool}
 */
proto.model.Pool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Pool;
  return proto.model.Pool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Pool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Pool}
 */
proto.model.Pool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnd(value);
      break;
    case 3:
      var value = /** @type {!proto.model.Pool.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = new proto.model.Tag;
      reader.readMessage(value,proto.model.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Pool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Pool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Pool} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.model.Pool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnd();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.model.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.model.Pool.Status = {
  UNKNOWN: 0,
  AVAILABLE: 1,
  RESERVED: 2
};

/**
 * optional string start = 1;
 * @return {string}
 */
proto.model.Pool.prototype.getStart = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.Pool.prototype.setStart = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string end = 2;
 * @return {string}
 */
proto.model.Pool.prototype.getEnd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.Pool.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Status status = 3;
 * @return {!proto.model.Pool.Status}
 */
proto.model.Pool.prototype.getStatus = function() {
  return /** @type {!proto.model.Pool.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.model.Pool.Status} value */
proto.model.Pool.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated Tag tags = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.model.Tag>}
 */
proto.model.Pool.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.model.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Tag, 4));
};


/** @param {!Array.<!proto.model.Tag>} value */
proto.model.Pool.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.model.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Tag}
 */
proto.model.Pool.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.model.Tag, opt_index);
};


proto.model.Pool.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.IPAddr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.IPAddr.repeatedFields_, null);
};
goog.inherits(proto.model.IPAddr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.IPAddr.displayName = 'proto.model.IPAddr';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.IPAddr.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.IPAddr.prototype.toObject = function(opt_includeInstance) {
  return proto.model.IPAddr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.IPAddr} msg The msg instance to transform.
 * @return {!Object}
 */
proto.model.IPAddr.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.model.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.IPAddr}
 */
proto.model.IPAddr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.IPAddr;
  return proto.model.IPAddr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.IPAddr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.IPAddr}
 */
proto.model.IPAddr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {!proto.model.IPAddr.IPStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.model.Tag;
      reader.readMessage(value,proto.model.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.IPAddr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.IPAddr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.IPAddr} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.model.IPAddr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.model.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.model.IPAddr.IPStatus = {
  UNKNOWN: 0,
  ACTIVE: 1,
  TEMPORARY_RESERVED: 2,
  RESERVED: 3
};

/**
 * optional string ip = 1;
 * @return {string}
 */
proto.model.IPAddr.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.IPAddr.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional IPStatus status = 2;
 * @return {!proto.model.IPAddr.IPStatus}
 */
proto.model.IPAddr.prototype.getStatus = function() {
  return /** @type {!proto.model.IPAddr.IPStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.model.IPAddr.IPStatus} value */
proto.model.IPAddr.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Tag tags = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.model.Tag>}
 */
proto.model.IPAddr.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.model.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Tag, 3));
};


/** @param {!Array.<!proto.model.Tag>} value */
proto.model.IPAddr.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.model.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Tag}
 */
proto.model.IPAddr.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.model.Tag, opt_index);
};


proto.model.IPAddr.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Network = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.Network.repeatedFields_, null);
};
goog.inherits(proto.model.Network, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Network.displayName = 'proto.model.Network';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.Network.repeatedFields_ = [2,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Network.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Network.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Network} msg The msg instance to transform.
 * @return {!Object}
 */
proto.model.Network.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gatewaysList: jspb.Message.getField(msg, 2),
    broadcast: jspb.Message.getFieldWithDefault(msg, 3, ""),
    netmask: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.model.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Network}
 */
proto.model.Network.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Network;
  return proto.model.Network.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Network} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Network}
 */
proto.model.Network.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addGateways(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBroadcast(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetmask(value);
      break;
    case 5:
      var value = /** @type {!proto.model.Network.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = new proto.model.Tag;
      reader.readMessage(value,proto.model.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Network.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Network.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Network} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.model.Network.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGatewaysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getBroadcast();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNetmask();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.model.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.model.Network.Status = {
  UNKNOWN: 0,
  AVAILABLE: 1,
  RESERVED: 2
};

/**
 * optional string prefix = 1;
 * @return {string}
 */
proto.model.Network.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.Network.prototype.setPrefix = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string gateways = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.model.Network.prototype.getGatewaysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.model.Network.prototype.setGatewaysList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.model.Network.prototype.addGateways = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.model.Network.prototype.clearGatewaysList = function() {
  this.setGatewaysList([]);
};


/**
 * optional string broadcast = 3;
 * @return {string}
 */
proto.model.Network.prototype.getBroadcast = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.Network.prototype.setBroadcast = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string netmask = 4;
 * @return {string}
 */
proto.model.Network.prototype.getNetmask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.Network.prototype.setNetmask = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional Status status = 5;
 * @return {!proto.model.Network.Status}
 */
proto.model.Network.prototype.getStatus = function() {
  return /** @type {!proto.model.Network.Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.model.Network.Status} value */
proto.model.Network.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated Tag tags = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.model.Tag>}
 */
proto.model.Network.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.model.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Tag, 6));
};


/** @param {!Array.<!proto.model.Tag>} value */
proto.model.Network.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.model.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Tag}
 */
proto.model.Network.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.model.Tag, opt_index);
};


proto.model.Network.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


goog.object.extend(exports, proto.model);
