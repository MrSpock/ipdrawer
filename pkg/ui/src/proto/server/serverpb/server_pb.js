/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
var github.com_mwitkow_go$proto$validators_validator_pb = require('../../github.com/mwitkow/go-proto-validators/validator_pb.js');
var github.com_taku$k_ipdrawer_pkg_model_model_pb = require('../../github.com/taku-k/ipdrawer/pkg/model/model_pb.js');
var github.com_gogo_protobuf_gogoproto_gogo_pb = require('../../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.exportSymbol('proto.serverpb.ActivateIPRequest', null, global);
goog.exportSymbol('proto.serverpb.ActivateIPResponse', null, global);
goog.exportSymbol('proto.serverpb.CreateNetworkRequest', null, global);
goog.exportSymbol('proto.serverpb.CreateNetworkResponse', null, global);
goog.exportSymbol('proto.serverpb.CreatePoolRequest', null, global);
goog.exportSymbol('proto.serverpb.CreatePoolResponse', null, global);
goog.exportSymbol('proto.serverpb.DeactivateIPRequest', null, global);
goog.exportSymbol('proto.serverpb.DeactivateIPResponse', null, global);
goog.exportSymbol('proto.serverpb.DrawIPEstimatingNetworkRequest', null, global);
goog.exportSymbol('proto.serverpb.DrawIPRequest', null, global);
goog.exportSymbol('proto.serverpb.DrawIPResponse', null, global);
goog.exportSymbol('proto.serverpb.GetEstimatedNetworkRequest', null, global);
goog.exportSymbol('proto.serverpb.GetNetworkIncludingIPRequest', null, global);
goog.exportSymbol('proto.serverpb.GetNetworkRequest', null, global);
goog.exportSymbol('proto.serverpb.GetNetworkResponse', null, global);
goog.exportSymbol('proto.serverpb.ListIPRequest', null, global);
goog.exportSymbol('proto.serverpb.ListIPResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.DrawIPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.DrawIPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.DrawIPRequest.displayName = 'proto.serverpb.DrawIPRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.DrawIPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.DrawIPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.DrawIPRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.DrawIPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mask: jspb.Message.getFieldWithDefault(msg, 2, 0),
    poolTag: (f = msg.getPoolTag()) && github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    activateImmediately: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.DrawIPRequest}
 */
proto.serverpb.DrawIPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.DrawIPRequest;
  return proto.serverpb.DrawIPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.DrawIPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.DrawIPRequest}
 */
proto.serverpb.DrawIPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMask(value);
      break;
    case 3:
      var value = new github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag;
      reader.readMessage(value,github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.deserializeBinaryFromReader);
      msg.setPoolTag(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActivateImmediately(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.DrawIPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.DrawIPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.DrawIPRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.DrawIPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMask();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPoolTag();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActivateImmediately();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.serverpb.DrawIPRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.serverpb.DrawIPRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 mask = 2;
 * @return {number}
 */
proto.serverpb.DrawIPRequest.prototype.getMask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.serverpb.DrawIPRequest.prototype.setMask = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional model.Tag pool_tag = 3;
 * @return {?proto.model.Tag}
 */
proto.serverpb.DrawIPRequest.prototype.getPoolTag = function() {
  return /** @type{?proto.model.Tag} */ (
    jspb.Message.getWrapperField(this, github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag, 3));
};


/** @param {?proto.model.Tag|undefined} value */
proto.serverpb.DrawIPRequest.prototype.setPoolTag = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.serverpb.DrawIPRequest.prototype.clearPoolTag = function() {
  this.setPoolTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.serverpb.DrawIPRequest.prototype.hasPoolTag = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.serverpb.DrawIPRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.serverpb.DrawIPRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool activate_immediately = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.serverpb.DrawIPRequest.prototype.getActivateImmediately = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.serverpb.DrawIPRequest.prototype.setActivateImmediately = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.DrawIPResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.DrawIPResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.DrawIPResponse.displayName = 'proto.serverpb.DrawIPResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.DrawIPResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.DrawIPResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.DrawIPResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.DrawIPResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.DrawIPResponse}
 */
proto.serverpb.DrawIPResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.DrawIPResponse;
  return proto.serverpb.DrawIPResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.DrawIPResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.DrawIPResponse}
 */
proto.serverpb.DrawIPResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.DrawIPResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.DrawIPResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.DrawIPResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.DrawIPResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.serverpb.DrawIPResponse.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.serverpb.DrawIPResponse.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.serverpb.DrawIPResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.serverpb.DrawIPResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.DrawIPEstimatingNetworkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.DrawIPEstimatingNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.DrawIPEstimatingNetworkRequest.displayName = 'proto.serverpb.DrawIPEstimatingNetworkRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.DrawIPEstimatingNetworkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.DrawIPEstimatingNetworkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.DrawIPEstimatingNetworkRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.DrawIPEstimatingNetworkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    poolTag: (f = msg.getPoolTag()) && github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.toObject(includeInstance, f),
    activateImmediately: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.DrawIPEstimatingNetworkRequest}
 */
proto.serverpb.DrawIPEstimatingNetworkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.DrawIPEstimatingNetworkRequest;
  return proto.serverpb.DrawIPEstimatingNetworkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.DrawIPEstimatingNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.DrawIPEstimatingNetworkRequest}
 */
proto.serverpb.DrawIPEstimatingNetworkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag;
      reader.readMessage(value,github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.deserializeBinaryFromReader);
      msg.setPoolTag(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActivateImmediately(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.DrawIPEstimatingNetworkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.DrawIPEstimatingNetworkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.DrawIPEstimatingNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.DrawIPEstimatingNetworkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoolTag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.serializeBinaryToWriter
    );
  }
  f = message.getActivateImmediately();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional model.Tag pool_tag = 1;
 * @return {?proto.model.Tag}
 */
proto.serverpb.DrawIPEstimatingNetworkRequest.prototype.getPoolTag = function() {
  return /** @type{?proto.model.Tag} */ (
    jspb.Message.getWrapperField(this, github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag, 1));
};


/** @param {?proto.model.Tag|undefined} value */
proto.serverpb.DrawIPEstimatingNetworkRequest.prototype.setPoolTag = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.serverpb.DrawIPEstimatingNetworkRequest.prototype.clearPoolTag = function() {
  this.setPoolTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.serverpb.DrawIPEstimatingNetworkRequest.prototype.hasPoolTag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool activate_immediately = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.serverpb.DrawIPEstimatingNetworkRequest.prototype.getActivateImmediately = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.serverpb.DrawIPEstimatingNetworkRequest.prototype.setActivateImmediately = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.GetNetworkIncludingIPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.GetNetworkIncludingIPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.GetNetworkIncludingIPRequest.displayName = 'proto.serverpb.GetNetworkIncludingIPRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.GetNetworkIncludingIPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.GetNetworkIncludingIPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.GetNetworkIncludingIPRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.GetNetworkIncludingIPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.GetNetworkIncludingIPRequest}
 */
proto.serverpb.GetNetworkIncludingIPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.GetNetworkIncludingIPRequest;
  return proto.serverpb.GetNetworkIncludingIPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.GetNetworkIncludingIPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.GetNetworkIncludingIPRequest}
 */
proto.serverpb.GetNetworkIncludingIPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.GetNetworkIncludingIPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.GetNetworkIncludingIPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.GetNetworkIncludingIPRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.GetNetworkIncludingIPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.serverpb.GetNetworkIncludingIPRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.serverpb.GetNetworkIncludingIPRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.ActivateIPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.serverpb.ActivateIPRequest.repeatedFields_, null);
};
goog.inherits(proto.serverpb.ActivateIPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.ActivateIPRequest.displayName = 'proto.serverpb.ActivateIPRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.serverpb.ActivateIPRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.ActivateIPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.ActivateIPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.ActivateIPRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.ActivateIPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.ActivateIPRequest}
 */
proto.serverpb.ActivateIPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.ActivateIPRequest;
  return proto.serverpb.ActivateIPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.ActivateIPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.ActivateIPRequest}
 */
proto.serverpb.ActivateIPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = new github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag;
      reader.readMessage(value,github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.ActivateIPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.ActivateIPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.ActivateIPRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.ActivateIPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.serverpb.ActivateIPRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.serverpb.ActivateIPRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated model.Tag tags = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.model.Tag>}
 */
proto.serverpb.ActivateIPRequest.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.model.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag, 2));
};


/** @param {!Array.<!proto.model.Tag>} value */
proto.serverpb.ActivateIPRequest.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Tag}
 */
proto.serverpb.ActivateIPRequest.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.Tag, opt_index);
};


proto.serverpb.ActivateIPRequest.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.ActivateIPResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.ActivateIPResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.ActivateIPResponse.displayName = 'proto.serverpb.ActivateIPResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.ActivateIPResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.ActivateIPResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.ActivateIPResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.ActivateIPResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.ActivateIPResponse}
 */
proto.serverpb.ActivateIPResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.ActivateIPResponse;
  return proto.serverpb.ActivateIPResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.ActivateIPResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.ActivateIPResponse}
 */
proto.serverpb.ActivateIPResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.ActivateIPResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.ActivateIPResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.ActivateIPResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.ActivateIPResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.DeactivateIPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.DeactivateIPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.DeactivateIPRequest.displayName = 'proto.serverpb.DeactivateIPRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.DeactivateIPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.DeactivateIPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.DeactivateIPRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.DeactivateIPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.DeactivateIPRequest}
 */
proto.serverpb.DeactivateIPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.DeactivateIPRequest;
  return proto.serverpb.DeactivateIPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.DeactivateIPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.DeactivateIPRequest}
 */
proto.serverpb.DeactivateIPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.DeactivateIPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.DeactivateIPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.DeactivateIPRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.DeactivateIPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.serverpb.DeactivateIPRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.serverpb.DeactivateIPRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.DeactivateIPResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.DeactivateIPResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.DeactivateIPResponse.displayName = 'proto.serverpb.DeactivateIPResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.DeactivateIPResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.DeactivateIPResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.DeactivateIPResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.DeactivateIPResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.DeactivateIPResponse}
 */
proto.serverpb.DeactivateIPResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.DeactivateIPResponse;
  return proto.serverpb.DeactivateIPResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.DeactivateIPResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.DeactivateIPResponse}
 */
proto.serverpb.DeactivateIPResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.DeactivateIPResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.DeactivateIPResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.DeactivateIPResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.DeactivateIPResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.GetNetworkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.GetNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.GetNetworkRequest.displayName = 'proto.serverpb.GetNetworkRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.GetNetworkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.GetNetworkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.GetNetworkRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.GetNetworkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mask: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.GetNetworkRequest}
 */
proto.serverpb.GetNetworkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.GetNetworkRequest;
  return proto.serverpb.GetNetworkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.GetNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.GetNetworkRequest}
 */
proto.serverpb.GetNetworkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMask(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.GetNetworkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.GetNetworkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.GetNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.GetNetworkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMask();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.serverpb.GetNetworkRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.serverpb.GetNetworkRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 mask = 2;
 * @return {number}
 */
proto.serverpb.GetNetworkRequest.prototype.getMask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.serverpb.GetNetworkRequest.prototype.setMask = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.serverpb.GetNetworkRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.serverpb.GetNetworkRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.GetEstimatedNetworkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.GetEstimatedNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.GetEstimatedNetworkRequest.displayName = 'proto.serverpb.GetEstimatedNetworkRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.GetEstimatedNetworkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.GetEstimatedNetworkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.GetEstimatedNetworkRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.GetEstimatedNetworkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.GetEstimatedNetworkRequest}
 */
proto.serverpb.GetEstimatedNetworkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.GetEstimatedNetworkRequest;
  return proto.serverpb.GetEstimatedNetworkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.GetEstimatedNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.GetEstimatedNetworkRequest}
 */
proto.serverpb.GetEstimatedNetworkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.GetEstimatedNetworkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.GetEstimatedNetworkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.GetEstimatedNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.GetEstimatedNetworkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.GetNetworkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.serverpb.GetNetworkResponse.repeatedFields_, null);
};
goog.inherits(proto.serverpb.GetNetworkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.GetNetworkResponse.displayName = 'proto.serverpb.GetNetworkResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.serverpb.GetNetworkResponse.repeatedFields_ = [2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.GetNetworkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.GetNetworkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.GetNetworkResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.GetNetworkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, ""),
    defaultGatewaysList: jspb.Message.getField(msg, 2),
    broadcast: jspb.Message.getFieldWithDefault(msg, 3, ""),
    netmask: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.GetNetworkResponse}
 */
proto.serverpb.GetNetworkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.GetNetworkResponse;
  return proto.serverpb.GetNetworkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.GetNetworkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.GetNetworkResponse}
 */
proto.serverpb.GetNetworkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDefaultGateways(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBroadcast(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetmask(value);
      break;
    case 5:
      var value = new github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag;
      reader.readMessage(value,github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.GetNetworkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.GetNetworkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.GetNetworkResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.GetNetworkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDefaultGatewaysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getBroadcast();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNetmask();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * optional string network = 1;
 * @return {string}
 */
proto.serverpb.GetNetworkResponse.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.serverpb.GetNetworkResponse.prototype.setNetwork = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string default_gateways = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.serverpb.GetNetworkResponse.prototype.getDefaultGatewaysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.serverpb.GetNetworkResponse.prototype.setDefaultGatewaysList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.serverpb.GetNetworkResponse.prototype.addDefaultGateways = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.serverpb.GetNetworkResponse.prototype.clearDefaultGatewaysList = function() {
  this.setDefaultGatewaysList([]);
};


/**
 * optional string broadcast = 3;
 * @return {string}
 */
proto.serverpb.GetNetworkResponse.prototype.getBroadcast = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.serverpb.GetNetworkResponse.prototype.setBroadcast = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string netmask = 4;
 * @return {string}
 */
proto.serverpb.GetNetworkResponse.prototype.getNetmask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.serverpb.GetNetworkResponse.prototype.setNetmask = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated model.Tag tags = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.model.Tag>}
 */
proto.serverpb.GetNetworkResponse.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.model.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag, 5));
};


/** @param {!Array.<!proto.model.Tag>} value */
proto.serverpb.GetNetworkResponse.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.model.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Tag}
 */
proto.serverpb.GetNetworkResponse.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.model.Tag, opt_index);
};


proto.serverpb.GetNetworkResponse.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.CreateNetworkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.serverpb.CreateNetworkRequest.repeatedFields_, null);
};
goog.inherits(proto.serverpb.CreateNetworkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.CreateNetworkRequest.displayName = 'proto.serverpb.CreateNetworkRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.serverpb.CreateNetworkRequest.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.CreateNetworkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.CreateNetworkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.CreateNetworkRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.CreateNetworkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mask: jspb.Message.getFieldWithDefault(msg, 2, 0),
    defaultGatewaysList: jspb.Message.getField(msg, 3),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.CreateNetworkRequest}
 */
proto.serverpb.CreateNetworkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.CreateNetworkRequest;
  return proto.serverpb.CreateNetworkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.CreateNetworkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.CreateNetworkRequest}
 */
proto.serverpb.CreateNetworkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMask(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addDefaultGateways(value);
      break;
    case 4:
      var value = new github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag;
      reader.readMessage(value,github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.CreateNetworkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.CreateNetworkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.CreateNetworkRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.CreateNetworkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMask();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDefaultGatewaysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.serverpb.CreateNetworkRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.serverpb.CreateNetworkRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 mask = 2;
 * @return {number}
 */
proto.serverpb.CreateNetworkRequest.prototype.getMask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.serverpb.CreateNetworkRequest.prototype.setMask = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string default_gateways = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.serverpb.CreateNetworkRequest.prototype.getDefaultGatewaysList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.serverpb.CreateNetworkRequest.prototype.setDefaultGatewaysList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.serverpb.CreateNetworkRequest.prototype.addDefaultGateways = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.serverpb.CreateNetworkRequest.prototype.clearDefaultGatewaysList = function() {
  this.setDefaultGatewaysList([]);
};


/**
 * repeated model.Tag tags = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.model.Tag>}
 */
proto.serverpb.CreateNetworkRequest.prototype.getTagsList = function() {
  return /** @type{!Array.<!proto.model.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, github.com_taku$k_ipdrawer_pkg_model_model_pb.Tag, 4));
};


/** @param {!Array.<!proto.model.Tag>} value */
proto.serverpb.CreateNetworkRequest.prototype.setTagsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.model.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Tag}
 */
proto.serverpb.CreateNetworkRequest.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.model.Tag, opt_index);
};


proto.serverpb.CreateNetworkRequest.prototype.clearTagsList = function() {
  this.setTagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.CreateNetworkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.CreateNetworkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.CreateNetworkResponse.displayName = 'proto.serverpb.CreateNetworkResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.CreateNetworkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.CreateNetworkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.CreateNetworkResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.CreateNetworkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.CreateNetworkResponse}
 */
proto.serverpb.CreateNetworkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.CreateNetworkResponse;
  return proto.serverpb.CreateNetworkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.CreateNetworkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.CreateNetworkResponse}
 */
proto.serverpb.CreateNetworkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.CreateNetworkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.CreateNetworkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.CreateNetworkResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.CreateNetworkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.CreatePoolRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.CreatePoolRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.CreatePoolRequest.displayName = 'proto.serverpb.CreatePoolRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.CreatePoolRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.CreatePoolRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.CreatePoolRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.CreatePoolRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mask: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pool: (f = msg.getPool()) && github.com_taku$k_ipdrawer_pkg_model_model_pb.Pool.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.CreatePoolRequest}
 */
proto.serverpb.CreatePoolRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.CreatePoolRequest;
  return proto.serverpb.CreatePoolRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.CreatePoolRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.CreatePoolRequest}
 */
proto.serverpb.CreatePoolRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMask(value);
      break;
    case 3:
      var value = new github.com_taku$k_ipdrawer_pkg_model_model_pb.Pool;
      reader.readMessage(value,github.com_taku$k_ipdrawer_pkg_model_model_pb.Pool.deserializeBinaryFromReader);
      msg.setPool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.CreatePoolRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.CreatePoolRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.CreatePoolRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.CreatePoolRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMask();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPool();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      github.com_taku$k_ipdrawer_pkg_model_model_pb.Pool.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.serverpb.CreatePoolRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.serverpb.CreatePoolRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 mask = 2;
 * @return {number}
 */
proto.serverpb.CreatePoolRequest.prototype.getMask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.serverpb.CreatePoolRequest.prototype.setMask = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional model.Pool pool = 3;
 * @return {?proto.model.Pool}
 */
proto.serverpb.CreatePoolRequest.prototype.getPool = function() {
  return /** @type{?proto.model.Pool} */ (
    jspb.Message.getWrapperField(this, github.com_taku$k_ipdrawer_pkg_model_model_pb.Pool, 3));
};


/** @param {?proto.model.Pool|undefined} value */
proto.serverpb.CreatePoolRequest.prototype.setPool = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.serverpb.CreatePoolRequest.prototype.clearPool = function() {
  this.setPool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.serverpb.CreatePoolRequest.prototype.hasPool = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.CreatePoolResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.CreatePoolResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.CreatePoolResponse.displayName = 'proto.serverpb.CreatePoolResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.CreatePoolResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.CreatePoolResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.CreatePoolResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.CreatePoolResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.CreatePoolResponse}
 */
proto.serverpb.CreatePoolResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.CreatePoolResponse;
  return proto.serverpb.CreatePoolResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.CreatePoolResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.CreatePoolResponse}
 */
proto.serverpb.CreatePoolResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.CreatePoolResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.CreatePoolResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.CreatePoolResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.CreatePoolResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.ListIPRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.serverpb.ListIPRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.ListIPRequest.displayName = 'proto.serverpb.ListIPRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.ListIPRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.ListIPRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.ListIPRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.ListIPRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.ListIPRequest}
 */
proto.serverpb.ListIPRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.ListIPRequest;
  return proto.serverpb.ListIPRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.ListIPRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.ListIPRequest}
 */
proto.serverpb.ListIPRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.ListIPRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.ListIPRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.ListIPRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.ListIPRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.serverpb.ListIPResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.serverpb.ListIPResponse.repeatedFields_, null);
};
goog.inherits(proto.serverpb.ListIPResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.serverpb.ListIPResponse.displayName = 'proto.serverpb.ListIPResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.serverpb.ListIPResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.serverpb.ListIPResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.serverpb.ListIPResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.serverpb.ListIPResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.serverpb.ListIPResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipsList: jspb.Message.toObjectList(msg.getIpsList(),
    github.com_taku$k_ipdrawer_pkg_model_model_pb.IPAddr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.serverpb.ListIPResponse}
 */
proto.serverpb.ListIPResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.serverpb.ListIPResponse;
  return proto.serverpb.ListIPResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.serverpb.ListIPResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.serverpb.ListIPResponse}
 */
proto.serverpb.ListIPResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github.com_taku$k_ipdrawer_pkg_model_model_pb.IPAddr;
      reader.readMessage(value,github.com_taku$k_ipdrawer_pkg_model_model_pb.IPAddr.deserializeBinaryFromReader);
      msg.addIps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.serverpb.ListIPResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.serverpb.ListIPResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.serverpb.ListIPResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.serverpb.ListIPResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      github.com_taku$k_ipdrawer_pkg_model_model_pb.IPAddr.serializeBinaryToWriter
    );
  }
};


/**
 * repeated model.IPAddr ips = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.model.IPAddr>}
 */
proto.serverpb.ListIPResponse.prototype.getIpsList = function() {
  return /** @type{!Array.<!proto.model.IPAddr>} */ (
    jspb.Message.getRepeatedWrapperField(this, github.com_taku$k_ipdrawer_pkg_model_model_pb.IPAddr, 1));
};


/** @param {!Array.<!proto.model.IPAddr>} value */
proto.serverpb.ListIPResponse.prototype.setIpsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.IPAddr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.IPAddr}
 */
proto.serverpb.ListIPResponse.prototype.addIps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.IPAddr, opt_index);
};


proto.serverpb.ListIPResponse.prototype.clearIpsList = function() {
  this.setIpsList([]);
};


goog.object.extend(exports, proto.serverpb);
