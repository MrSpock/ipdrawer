// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model/model.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		model/model.proto

	It has these top-level messages:
		Tag
		Pool
		IPAddr
		Network
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Pool_Status int32

const (
	Pool_UNKNOWN   Pool_Status = 0
	Pool_AVAILABLE Pool_Status = 1
	Pool_RESERVED  Pool_Status = 2
)

var Pool_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "AVAILABLE",
	2: "RESERVED",
}
var Pool_Status_value = map[string]int32{
	"UNKNOWN":   0,
	"AVAILABLE": 1,
	"RESERVED":  2,
}

func (x Pool_Status) String() string {
	return proto.EnumName(Pool_Status_name, int32(x))
}
func (Pool_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorModel, []int{1, 0} }

type IPAddr_Status int32

const (
	IPAddr_UNKNOWN            IPAddr_Status = 0
	IPAddr_ACTIVE             IPAddr_Status = 1
	IPAddr_TEMPORARY_RESERVED IPAddr_Status = 2
	IPAddr_RESERVED           IPAddr_Status = 3
)

var IPAddr_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACTIVE",
	2: "TEMPORARY_RESERVED",
	3: "RESERVED",
}
var IPAddr_Status_value = map[string]int32{
	"UNKNOWN":            0,
	"ACTIVE":             1,
	"TEMPORARY_RESERVED": 2,
	"RESERVED":           3,
}

func (x IPAddr_Status) String() string {
	return proto.EnumName(IPAddr_Status_name, int32(x))
}
func (IPAddr_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorModel, []int{2, 0} }

type Network_Status int32

const (
	Network_UNKNOWN   Network_Status = 0
	Network_AVAILABLE Network_Status = 1
	Network_RESERVED  Network_Status = 2
)

var Network_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "AVAILABLE",
	2: "RESERVED",
}
var Network_Status_value = map[string]int32{
	"UNKNOWN":   0,
	"AVAILABLE": 1,
	"RESERVED":  2,
}

func (x Network_Status) String() string {
	return proto.EnumName(Network_Status_name, int32(x))
}
func (Network_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorModel, []int{3, 0} }

type Tag struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *Tag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Pool struct {
	Start  string      `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End    string      `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Status Pool_Status `protobuf:"varint,3,opt,name=status,proto3,enum=model.Pool_Status" json:"status,omitempty"`
	Tags   []*Tag      `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *Pool) Reset()                    { *m = Pool{} }
func (m *Pool) String() string            { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()               {}
func (*Pool) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

func (m *Pool) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Pool) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *Pool) GetStatus() Pool_Status {
	if m != nil {
		return m.Status
	}
	return Pool_UNKNOWN
}

func (m *Pool) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type IPAddr struct {
	Ip     string        `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Status IPAddr_Status `protobuf:"varint,2,opt,name=status,proto3,enum=model.IPAddr_Status" json:"status,omitempty"`
	Tags   []*Tag        `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *IPAddr) Reset()                    { *m = IPAddr{} }
func (m *IPAddr) String() string            { return proto.CompactTextString(m) }
func (*IPAddr) ProtoMessage()               {}
func (*IPAddr) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{2} }

func (m *IPAddr) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPAddr) GetStatus() IPAddr_Status {
	if m != nil {
		return m.Status
	}
	return IPAddr_UNKNOWN
}

func (m *IPAddr) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Network struct {
	Prefix    string         `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Gateways  []string       `protobuf:"bytes,2,rep,name=gateways" json:"gateways,omitempty"`
	Broadcast string         `protobuf:"bytes,3,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Netmask   string         `protobuf:"bytes,4,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Status    Network_Status `protobuf:"varint,5,opt,name=status,proto3,enum=model.Network_Status" json:"status,omitempty"`
	Tags      []*Tag         `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{3} }

func (m *Network) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Network) GetGateways() []string {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *Network) GetBroadcast() string {
	if m != nil {
		return m.Broadcast
	}
	return ""
}

func (m *Network) GetNetmask() string {
	if m != nil {
		return m.Netmask
	}
	return ""
}

func (m *Network) GetStatus() Network_Status {
	if m != nil {
		return m.Status
	}
	return Network_UNKNOWN
}

func (m *Network) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Tag)(nil), "model.Tag")
	proto.RegisterType((*Pool)(nil), "model.Pool")
	proto.RegisterType((*IPAddr)(nil), "model.IPAddr")
	proto.RegisterType((*Network)(nil), "model.Network")
	proto.RegisterEnum("model.Pool_Status", Pool_Status_name, Pool_Status_value)
	proto.RegisterEnum("model.IPAddr_Status", IPAddr_Status_name, IPAddr_Status_value)
	proto.RegisterEnum("model.Network_Status", Network_Status_name, Network_Status_value)
}
func (this *Tag) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Tag)
	if !ok {
		that2, ok := that.(Tag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Pool) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.End != that1.End {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (this *IPAddr) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IPAddr)
	if !ok {
		that2, ok := that.(IPAddr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (this *Network) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Network)
	if !ok {
		that2, ok := that.(Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if this.Gateways[i] != that1.Gateways[i] {
			return false
		}
	}
	if this.Broadcast != that1.Broadcast {
		return false
	}
	if this.Netmask != that1.Netmask {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Start) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x22
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IPAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAddr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.Gateways) > 0 {
		for _, s := range m.Gateways {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Broadcast) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Broadcast)))
		i += copy(dAtA[i:], m.Broadcast)
	}
	if len(m.Netmask) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Netmask)))
		i += copy(dAtA[i:], m.Netmask)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x32
			i++
			i = encodeVarintModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Model(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Model(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *Pool) Size() (n int) {
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *IPAddr) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func (m *Network) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.Gateways) > 0 {
		for _, s := range m.Gateways {
			l = len(s)
			n += 1 + l + sovModel(uint64(l))
		}
	}
	l = len(m.Broadcast)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Netmask)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovModel(uint64(l))
		}
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Pool_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (IPAddr_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Broadcast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netmask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Netmask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Network_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model/model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xbb, 0x76, 0xe2, 0x36, 0xd3, 0xdf, 0x0f, 0x85, 0x55, 0x41, 0x51, 0x0f, 0x6e, 0x15,
	0xf5, 0xe0, 0x22, 0x1c, 0xa7, 0x2e, 0x45, 0xca, 0xd1, 0x81, 0x08, 0x45, 0x94, 0x34, 0x72, 0x43,
	0x10, 0x0a, 0x29, 0xda, 0xd4, 0xae, 0xb1, 0xf2, 0x67, 0x23, 0x7b, 0xd3, 0x50, 0x35, 0x15, 0xe2,
	0x00, 0x12, 0x97, 0x0a, 0xf5, 0xc4, 0x91, 0x1b, 0x3c, 0x0a, 0x47, 0xde, 0x20, 0xc8, 0x3c, 0x00,
	0xaf, 0x80, 0xbc, 0x36, 0x69, 0x91, 0xc8, 0x01, 0x09, 0x25, 0x17, 0x7b, 0x66, 0xfc, 0x1d, 0xed,
	0xd7, 0x9f, 0xdd, 0x59, 0xb8, 0xde, 0xa5, 0x96, 0xdd, 0xd1, 0xf8, 0x33, 0xd7, 0xf7, 0x28, 0xa3,
	0x38, 0xc9, 0x93, 0xd5, 0xbb, 0x8e, 0xcb, 0x5e, 0x0c, 0x5a, 0xb9, 0x43, 0xda, 0xd5, 0xba, 0x43,
	0x97, 0xb5, 0xe9, 0x50, 0x73, 0xa8, 0xca, 0x35, 0xea, 0x31, 0xe9, 0xb8, 0x16, 0x61, 0xd4, 0xf3,
	0xb5, 0x49, 0x18, 0xb5, 0xaf, 0xaa, 0x57, 0xfa, 0x1c, 0xea, 0x50, 0x8d, 0x97, 0x5b, 0x83, 0x23,
	0x9e, 0xf1, 0x84, 0x47, 0x91, 0x3c, 0xab, 0x82, 0x58, 0x23, 0x0e, 0x4e, 0x83, 0xd8, 0xb6, 0x4f,
	0x32, 0x68, 0x1d, 0x29, 0x29, 0x33, 0x0c, 0xf1, 0x0a, 0x24, 0x8f, 0x49, 0x67, 0x60, 0x67, 0x04,
	0x5e, 0x8b, 0x92, 0xec, 0x85, 0x08, 0x89, 0x2a, 0xa5, 0x1d, 0xfc, 0x06, 0x41, 0xd2, 0x67, 0xc4,
	0x63, 0x51, 0x4f, 0x91, 0x06, 0xe3, 0xb5, 0x36, 0xb8, 0x07, 0x8a, 0xd2, 0xc8, 0xab, 0x85, 0xe6,
	0xa8, 0xb1, 0xa5, 0x16, 0x9a, 0x51, 0xb8, 0xc5, 0x5f, 0xa7, 0xfa, 0xd9, 0x48, 0x6f, 0xe4, 0xd5,
	0x3b, 0x71, 0x55, 0xdf, 0x69, 0xe4, 0xd5, 0x9d, 0xe6, 0xe6, 0xb3, 0xdc, 0xe6, 0xe9, 0xf6, 0xd9,
	0xdf, 0x76, 0x6d, 0x98, 0xd1, 0xea, 0xf8, 0x35, 0x02, 0xd1, 0xee, 0x59, 0x91, 0xcb, 0xd9, 0xbb,
	0x08, 0xd7, 0xc6, 0xb7, 0x40, 0xf2, 0x19, 0x61, 0x03, 0x3f, 0x23, 0xae, 0x23, 0xe5, 0x9a, 0x8e,
	0x73, 0xd1, 0x7e, 0x86, 0xa0, 0x72, 0xfb, 0xfc, 0x8b, 0x19, 0x2b, 0xb0, 0x0c, 0x09, 0x46, 0x1c,
	0x3f, 0x93, 0x58, 0x17, 0x95, 0x65, 0x1d, 0x62, 0x65, 0x8d, 0x38, 0x26, 0xaf, 0x67, 0x75, 0x90,
	0xa2, 0x0e, 0xbc, 0x0c, 0x8b, 0x8f, 0x2b, 0x0f, 0x2b, 0x7b, 0x4f, 0x2a, 0xe9, 0x05, 0xfc, 0x3f,
	0xa4, 0x8c, 0xba, 0x51, 0xde, 0x35, 0x8a, 0xbb, 0xa5, 0x34, 0xc2, 0xff, 0xc1, 0x92, 0x59, 0xda,
	0x2f, 0x99, 0xf5, 0xd2, 0xfd, 0xb4, 0x90, 0xfd, 0x28, 0x80, 0x54, 0xae, 0x1a, 0x96, 0xe5, 0xe1,
	0x57, 0x20, 0xb8, 0xfd, 0x79, 0x6d, 0x89, 0xe0, 0xf6, 0xf1, 0xed, 0x09, 0x0b, 0x81, 0xb3, 0x58,
	0x89, 0xff, 0x30, 0xf2, 0x37, 0x8d, 0x86, 0x38, 0x85, 0xc6, 0x83, 0x3f, 0xd3, 0x00, 0x90, 0x8c,
	0x7b, 0xb5, 0x72, 0x3d, 0x44, 0x71, 0x13, 0x70, 0xad, 0xf4, 0xa8, 0xba, 0x67, 0x1a, 0xe6, 0xd3,
	0xe7, 0x97, 0x50, 0x7e, 0x43, 0x24, 0x66, 0x7f, 0x24, 0x61, 0xb1, 0x62, 0xb3, 0x21, 0xf5, 0xda,
	0xf8, 0x13, 0x02, 0xa9, 0xef, 0xd9, 0x47, 0xee, 0xcb, 0x18, 0xd4, 0x39, 0x0a, 0xc6, 0x6b, 0xef,
	0x10, 0xbc, 0x45, 0xb3, 0x62, 0xa5, 0x29, 0x57, 0x55, 0x5c, 0x52, 0x68, 0x8e, 0xb6, 0x1b, 0x79,
	0x55, 0x0f, 0x41, 0xc6, 0xf6, 0xf0, 0x7b, 0x04, 0x4b, 0x0e, 0x61, 0xf6, 0x90, 0x9c, 0x84, 0x3c,
	0x45, 0x25, 0x55, 0x64, 0xc1, 0x78, 0xad, 0x0f, 0x3d, 0xe5, 0x60, 0x63, 0x73, 0x34, 0xbb, 0x9d,
	0x9d, 0xb8, 0xc0, 0x17, 0x08, 0x52, 0x2d, 0x8f, 0x12, 0xeb, 0x90, 0xf8, 0x8c, 0x9f, 0xf7, 0x79,
	0x79, 0xba, 0xb4, 0x81, 0xcf, 0x11, 0x2c, 0xf6, 0x6c, 0xd6, 0x25, 0x7e, 0x3b, 0x93, 0x98, 0xa3,
	0xa5, 0x5f, 0x26, 0xb0, 0x3a, 0x99, 0x82, 0x24, 0x9f, 0x82, 0x1b, 0xf1, 0xc9, 0x8e, 0x8f, 0xe0,
	0xb4, 0x31, 0x90, 0xfe, 0xdd, 0xa5, 0x50, 0x5c, 0xf9, 0x1c, 0xc8, 0xe8, 0x4b, 0x20, 0xa3, 0xaf,
	0x81, 0x8c, 0xbe, 0x05, 0x32, 0xfa, 0xf0, 0x5d, 0x5e, 0x68, 0x49, 0xfc, 0xd6, 0xdf, 0xfe, 0x19,
	0x00, 0x00, 0xff, 0xff, 0x98, 0x96, 0x94, 0xb1, 0x78, 0x06, 0x00, 0x00,
}
