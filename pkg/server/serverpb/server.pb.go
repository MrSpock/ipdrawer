// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/serverpb/server.proto

/*
	Package serverpb is a generated protocol buffer package.

	It is generated from these files:
		server/serverpb/server.proto

	It has these top-level messages:
		ListNetworkRequest
		ListNetworkResponse
		DrawIPRequest
		DrawIPResponse
		DrawIPEstimatingNetworkRequest
		GetNetworkIncludingIPRequest
		CreateIPResponse
		ActivateIPRequest
		DeactivateIPRequest
		DeactivateIPResponse
		UpdateIPResponse
		GetNetworkRequest
		GetEstimatedNetworkRequest
		GetNetworkResponse
		CreateNetworkRequest
		CreateNetworkResponse
		CreatePoolRequest
		CreatePoolResponse
		ListIPRequest
		ListIPResponse
		ListTemporaryReservedIPRequest
		ListTemporaryReservedIPResponse
		ListPoolRequest
		ListPoolResponse
		GetIPInPoolRequest
		GetIPInPoolResponse
*/
package serverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/mwitkow/go-proto-validators"
import model "github.com/taku-k/ipdrawer/pkg/model"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListNetworkRequest struct {
}

func (m *ListNetworkRequest) Reset()                    { *m = ListNetworkRequest{} }
func (m *ListNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNetworkRequest) ProtoMessage()               {}
func (*ListNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{0} }

type ListNetworkResponse struct {
	Networks []*model.Network `protobuf:"bytes,1,rep,name=networks" json:"networks,omitempty"`
}

func (m *ListNetworkResponse) Reset()                    { *m = ListNetworkResponse{} }
func (m *ListNetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNetworkResponse) ProtoMessage()               {}
func (*ListNetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{1} }

func (m *ListNetworkResponse) GetNetworks() []*model.Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

type DrawIPRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	//  int32 mask = 2 [(validator.field) = {int_gt: -1, int_lt: 33}];
	Mask                int32      `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	PoolTag             *model.Tag `protobuf:"bytes,3,opt,name=pool_tag,json=poolTag" json:"pool_tag,omitempty"`
	Name                string     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ActivateImmediately bool       `protobuf:"varint,5,opt,name=activate_immediately,json=activateImmediately,proto3" json:"activate_immediately,omitempty"`
}

func (m *DrawIPRequest) Reset()                    { *m = DrawIPRequest{} }
func (m *DrawIPRequest) String() string            { return proto.CompactTextString(m) }
func (*DrawIPRequest) ProtoMessage()               {}
func (*DrawIPRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{2} }

func (m *DrawIPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DrawIPRequest) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *DrawIPRequest) GetPoolTag() *model.Tag {
	if m != nil {
		return m.PoolTag
	}
	return nil
}

func (m *DrawIPRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DrawIPRequest) GetActivateImmediately() bool {
	if m != nil {
		return m.ActivateImmediately
	}
	return false
}

type DrawIPResponse struct {
	Ip      string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DrawIPResponse) Reset()                    { *m = DrawIPResponse{} }
func (m *DrawIPResponse) String() string            { return proto.CompactTextString(m) }
func (*DrawIPResponse) ProtoMessage()               {}
func (*DrawIPResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{3} }

func (m *DrawIPResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DrawIPResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DrawIPEstimatingNetworkRequest struct {
	PoolTag             *model.Tag `protobuf:"bytes,1,opt,name=pool_tag,json=poolTag" json:"pool_tag,omitempty"`
	ActivateImmediately bool       `protobuf:"varint,2,opt,name=activate_immediately,json=activateImmediately,proto3" json:"activate_immediately,omitempty"`
}

func (m *DrawIPEstimatingNetworkRequest) Reset()         { *m = DrawIPEstimatingNetworkRequest{} }
func (m *DrawIPEstimatingNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*DrawIPEstimatingNetworkRequest) ProtoMessage()    {}
func (*DrawIPEstimatingNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorServer, []int{4}
}

func (m *DrawIPEstimatingNetworkRequest) GetPoolTag() *model.Tag {
	if m != nil {
		return m.PoolTag
	}
	return nil
}

func (m *DrawIPEstimatingNetworkRequest) GetActivateImmediately() bool {
	if m != nil {
		return m.ActivateImmediately
	}
	return false
}

type GetNetworkIncludingIPRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *GetNetworkIncludingIPRequest) Reset()         { *m = GetNetworkIncludingIPRequest{} }
func (m *GetNetworkIncludingIPRequest) String() string { return proto.CompactTextString(m) }
func (*GetNetworkIncludingIPRequest) ProtoMessage()    {}
func (*GetNetworkIncludingIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorServer, []int{5}
}

func (m *GetNetworkIncludingIPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type CreateIPResponse struct {
}

func (m *CreateIPResponse) Reset()                    { *m = CreateIPResponse{} }
func (m *CreateIPResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateIPResponse) ProtoMessage()               {}
func (*CreateIPResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{6} }

type ActivateIPRequest struct {
	Ip   string       `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Tags []*model.Tag `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *ActivateIPRequest) Reset()                    { *m = ActivateIPRequest{} }
func (m *ActivateIPRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivateIPRequest) ProtoMessage()               {}
func (*ActivateIPRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{7} }

func (m *ActivateIPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ActivateIPRequest) GetTags() []*model.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type DeactivateIPRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *DeactivateIPRequest) Reset()                    { *m = DeactivateIPRequest{} }
func (m *DeactivateIPRequest) String() string            { return proto.CompactTextString(m) }
func (*DeactivateIPRequest) ProtoMessage()               {}
func (*DeactivateIPRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{8} }

func (m *DeactivateIPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type DeactivateIPResponse struct {
}

func (m *DeactivateIPResponse) Reset()                    { *m = DeactivateIPResponse{} }
func (m *DeactivateIPResponse) String() string            { return proto.CompactTextString(m) }
func (*DeactivateIPResponse) ProtoMessage()               {}
func (*DeactivateIPResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{9} }

type UpdateIPResponse struct {
}

func (m *UpdateIPResponse) Reset()                    { *m = UpdateIPResponse{} }
func (m *UpdateIPResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateIPResponse) ProtoMessage()               {}
func (*UpdateIPResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{10} }

type GetNetworkRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// int32 mask = 2 [(validator.field) = {int_gt: -1, int_lt: 33}];
	Mask int32  `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetNetworkRequest) Reset()                    { *m = GetNetworkRequest{} }
func (m *GetNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNetworkRequest) ProtoMessage()               {}
func (*GetNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{11} }

func (m *GetNetworkRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetNetworkRequest) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *GetNetworkRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetEstimatedNetworkRequest struct {
}

func (m *GetEstimatedNetworkRequest) Reset()         { *m = GetEstimatedNetworkRequest{} }
func (m *GetEstimatedNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*GetEstimatedNetworkRequest) ProtoMessage()    {}
func (*GetEstimatedNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorServer, []int{12}
}

type GetNetworkResponse struct {
	Network         string       `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	DefaultGateways []string     `protobuf:"bytes,2,rep,name=default_gateways,json=defaultGateways" json:"default_gateways,omitempty"`
	Broadcast       string       `protobuf:"bytes,3,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Netmask         string       `protobuf:"bytes,4,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Tags            []*model.Tag `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
}

func (m *GetNetworkResponse) Reset()                    { *m = GetNetworkResponse{} }
func (m *GetNetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNetworkResponse) ProtoMessage()               {}
func (*GetNetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{13} }

func (m *GetNetworkResponse) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *GetNetworkResponse) GetDefaultGateways() []string {
	if m != nil {
		return m.DefaultGateways
	}
	return nil
}

func (m *GetNetworkResponse) GetBroadcast() string {
	if m != nil {
		return m.Broadcast
	}
	return ""
}

func (m *GetNetworkResponse) GetNetmask() string {
	if m != nil {
		return m.Netmask
	}
	return ""
}

func (m *GetNetworkResponse) GetTags() []*model.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CreateNetworkRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// int32 mask = 2 [(validator.field) = {int_gt: -1, int_lt: 33}];
	Mask            int32                `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	DefaultGateways []string             `protobuf:"bytes,3,rep,name=default_gateways,json=defaultGateways" json:"default_gateways,omitempty"`
	Tags            []*model.Tag         `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Status          model.Network_Status `protobuf:"varint,5,opt,name=status,proto3,enum=model.Network_Status" json:"status,omitempty"`
}

func (m *CreateNetworkRequest) Reset()                    { *m = CreateNetworkRequest{} }
func (m *CreateNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNetworkRequest) ProtoMessage()               {}
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{14} }

func (m *CreateNetworkRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CreateNetworkRequest) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *CreateNetworkRequest) GetDefaultGateways() []string {
	if m != nil {
		return m.DefaultGateways
	}
	return nil
}

func (m *CreateNetworkRequest) GetTags() []*model.Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateNetworkRequest) GetStatus() model.Network_Status {
	if m != nil {
		return m.Status
	}
	return model.Network_UNKNOWN
}

type CreateNetworkResponse struct {
}

func (m *CreateNetworkResponse) Reset()                    { *m = CreateNetworkResponse{} }
func (m *CreateNetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNetworkResponse) ProtoMessage()               {}
func (*CreateNetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{15} }

type CreatePoolRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// int32 mask = 2 [(validator.field) = {int_gt: -1, int_lt: 33}];
	Mask int32       `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Pool *model.Pool `protobuf:"bytes,3,opt,name=pool" json:"pool,omitempty"`
}

func (m *CreatePoolRequest) Reset()                    { *m = CreatePoolRequest{} }
func (m *CreatePoolRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePoolRequest) ProtoMessage()               {}
func (*CreatePoolRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{16} }

func (m *CreatePoolRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CreatePoolRequest) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *CreatePoolRequest) GetPool() *model.Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

type CreatePoolResponse struct {
}

func (m *CreatePoolResponse) Reset()                    { *m = CreatePoolResponse{} }
func (m *CreatePoolResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePoolResponse) ProtoMessage()               {}
func (*CreatePoolResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{17} }

type ListIPRequest struct {
}

func (m *ListIPRequest) Reset()                    { *m = ListIPRequest{} }
func (m *ListIPRequest) String() string            { return proto.CompactTextString(m) }
func (*ListIPRequest) ProtoMessage()               {}
func (*ListIPRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{18} }

type ListIPResponse struct {
	Ips []*model.IPAddr `protobuf:"bytes,1,rep,name=ips" json:"ips,omitempty"`
}

func (m *ListIPResponse) Reset()                    { *m = ListIPResponse{} }
func (m *ListIPResponse) String() string            { return proto.CompactTextString(m) }
func (*ListIPResponse) ProtoMessage()               {}
func (*ListIPResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{19} }

func (m *ListIPResponse) GetIps() []*model.IPAddr {
	if m != nil {
		return m.Ips
	}
	return nil
}

type ListTemporaryReservedIPRequest struct {
}

func (m *ListTemporaryReservedIPRequest) Reset()         { *m = ListTemporaryReservedIPRequest{} }
func (m *ListTemporaryReservedIPRequest) String() string { return proto.CompactTextString(m) }
func (*ListTemporaryReservedIPRequest) ProtoMessage()    {}
func (*ListTemporaryReservedIPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorServer, []int{20}
}

type ListTemporaryReservedIPResponse struct {
	Ips []*model.IPAddr `protobuf:"bytes,1,rep,name=ips" json:"ips,omitempty"`
}

func (m *ListTemporaryReservedIPResponse) Reset()         { *m = ListTemporaryReservedIPResponse{} }
func (m *ListTemporaryReservedIPResponse) String() string { return proto.CompactTextString(m) }
func (*ListTemporaryReservedIPResponse) ProtoMessage()    {}
func (*ListTemporaryReservedIPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorServer, []int{21}
}

func (m *ListTemporaryReservedIPResponse) GetIps() []*model.IPAddr {
	if m != nil {
		return m.Ips
	}
	return nil
}

type ListPoolRequest struct {
}

func (m *ListPoolRequest) Reset()                    { *m = ListPoolRequest{} }
func (m *ListPoolRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPoolRequest) ProtoMessage()               {}
func (*ListPoolRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{22} }

type ListPoolResponse struct {
	Pools []*model.Pool `protobuf:"bytes,1,rep,name=pools" json:"pools,omitempty"`
}

func (m *ListPoolResponse) Reset()                    { *m = ListPoolResponse{} }
func (m *ListPoolResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPoolResponse) ProtoMessage()               {}
func (*ListPoolResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{23} }

func (m *ListPoolResponse) GetPools() []*model.Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

type GetIPInPoolRequest struct {
	RangeStart string `protobuf:"bytes,1,opt,name=range_start,json=rangeStart,proto3" json:"range_start,omitempty"`
	RangeEnd   string `protobuf:"bytes,2,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
}

func (m *GetIPInPoolRequest) Reset()                    { *m = GetIPInPoolRequest{} }
func (m *GetIPInPoolRequest) String() string            { return proto.CompactTextString(m) }
func (*GetIPInPoolRequest) ProtoMessage()               {}
func (*GetIPInPoolRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{24} }

func (m *GetIPInPoolRequest) GetRangeStart() string {
	if m != nil {
		return m.RangeStart
	}
	return ""
}

func (m *GetIPInPoolRequest) GetRangeEnd() string {
	if m != nil {
		return m.RangeEnd
	}
	return ""
}

type GetIPInPoolResponse struct {
	Pool *model.Pool     `protobuf:"bytes,1,opt,name=pool" json:"pool,omitempty"`
	Ips  []*model.IPAddr `protobuf:"bytes,2,rep,name=ips" json:"ips,omitempty"`
}

func (m *GetIPInPoolResponse) Reset()                    { *m = GetIPInPoolResponse{} }
func (m *GetIPInPoolResponse) String() string            { return proto.CompactTextString(m) }
func (*GetIPInPoolResponse) ProtoMessage()               {}
func (*GetIPInPoolResponse) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{25} }

func (m *GetIPInPoolResponse) GetPool() *model.Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *GetIPInPoolResponse) GetIps() []*model.IPAddr {
	if m != nil {
		return m.Ips
	}
	return nil
}

func init() {
	proto.RegisterType((*ListNetworkRequest)(nil), "serverpb.ListNetworkRequest")
	proto.RegisterType((*ListNetworkResponse)(nil), "serverpb.ListNetworkResponse")
	proto.RegisterType((*DrawIPRequest)(nil), "serverpb.DrawIPRequest")
	proto.RegisterType((*DrawIPResponse)(nil), "serverpb.DrawIPResponse")
	proto.RegisterType((*DrawIPEstimatingNetworkRequest)(nil), "serverpb.DrawIPEstimatingNetworkRequest")
	proto.RegisterType((*GetNetworkIncludingIPRequest)(nil), "serverpb.GetNetworkIncludingIPRequest")
	proto.RegisterType((*CreateIPResponse)(nil), "serverpb.CreateIPResponse")
	proto.RegisterType((*ActivateIPRequest)(nil), "serverpb.ActivateIPRequest")
	proto.RegisterType((*DeactivateIPRequest)(nil), "serverpb.DeactivateIPRequest")
	proto.RegisterType((*DeactivateIPResponse)(nil), "serverpb.DeactivateIPResponse")
	proto.RegisterType((*UpdateIPResponse)(nil), "serverpb.UpdateIPResponse")
	proto.RegisterType((*GetNetworkRequest)(nil), "serverpb.GetNetworkRequest")
	proto.RegisterType((*GetEstimatedNetworkRequest)(nil), "serverpb.GetEstimatedNetworkRequest")
	proto.RegisterType((*GetNetworkResponse)(nil), "serverpb.GetNetworkResponse")
	proto.RegisterType((*CreateNetworkRequest)(nil), "serverpb.CreateNetworkRequest")
	proto.RegisterType((*CreateNetworkResponse)(nil), "serverpb.CreateNetworkResponse")
	proto.RegisterType((*CreatePoolRequest)(nil), "serverpb.CreatePoolRequest")
	proto.RegisterType((*CreatePoolResponse)(nil), "serverpb.CreatePoolResponse")
	proto.RegisterType((*ListIPRequest)(nil), "serverpb.ListIPRequest")
	proto.RegisterType((*ListIPResponse)(nil), "serverpb.ListIPResponse")
	proto.RegisterType((*ListTemporaryReservedIPRequest)(nil), "serverpb.ListTemporaryReservedIPRequest")
	proto.RegisterType((*ListTemporaryReservedIPResponse)(nil), "serverpb.ListTemporaryReservedIPResponse")
	proto.RegisterType((*ListPoolRequest)(nil), "serverpb.ListPoolRequest")
	proto.RegisterType((*ListPoolResponse)(nil), "serverpb.ListPoolResponse")
	proto.RegisterType((*GetIPInPoolRequest)(nil), "serverpb.GetIPInPoolRequest")
	proto.RegisterType((*GetIPInPoolResponse)(nil), "serverpb.GetIPInPoolResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkServiceV0 service

type NetworkServiceV0Client interface {
	ListNetwork(ctx context.Context, in *ListNetworkRequest, opts ...grpc.CallOption) (*ListNetworkResponse, error)
	GetEstimatedNetwork(ctx context.Context, in *GetEstimatedNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	DrawIP(ctx context.Context, in *DrawIPRequest, opts ...grpc.CallOption) (*DrawIPResponse, error)
	DrawIPEstimatingNetwork(ctx context.Context, in *DrawIPEstimatingNetworkRequest, opts ...grpc.CallOption) (*DrawIPResponse, error)
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error)
	CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolResponse, error)
}

type networkServiceV0Client struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceV0Client(cc *grpc.ClientConn) NetworkServiceV0Client {
	return &networkServiceV0Client{cc}
}

func (c *networkServiceV0Client) ListNetwork(ctx context.Context, in *ListNetworkRequest, opts ...grpc.CallOption) (*ListNetworkResponse, error) {
	out := new(ListNetworkResponse)
	err := grpc.Invoke(ctx, "/serverpb.NetworkServiceV0/ListNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceV0Client) GetEstimatedNetwork(ctx context.Context, in *GetEstimatedNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	out := new(GetNetworkResponse)
	err := grpc.Invoke(ctx, "/serverpb.NetworkServiceV0/GetEstimatedNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceV0Client) DrawIP(ctx context.Context, in *DrawIPRequest, opts ...grpc.CallOption) (*DrawIPResponse, error) {
	out := new(DrawIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.NetworkServiceV0/DrawIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceV0Client) DrawIPEstimatingNetwork(ctx context.Context, in *DrawIPEstimatingNetworkRequest, opts ...grpc.CallOption) (*DrawIPResponse, error) {
	out := new(DrawIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.NetworkServiceV0/DrawIPEstimatingNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceV0Client) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	out := new(GetNetworkResponse)
	err := grpc.Invoke(ctx, "/serverpb.NetworkServiceV0/GetNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceV0Client) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error) {
	out := new(CreateNetworkResponse)
	err := grpc.Invoke(ctx, "/serverpb.NetworkServiceV0/CreateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceV0Client) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolResponse, error) {
	out := new(CreatePoolResponse)
	err := grpc.Invoke(ctx, "/serverpb.NetworkServiceV0/CreatePool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServiceV0 service

type NetworkServiceV0Server interface {
	ListNetwork(context.Context, *ListNetworkRequest) (*ListNetworkResponse, error)
	GetEstimatedNetwork(context.Context, *GetEstimatedNetworkRequest) (*GetNetworkResponse, error)
	DrawIP(context.Context, *DrawIPRequest) (*DrawIPResponse, error)
	DrawIPEstimatingNetwork(context.Context, *DrawIPEstimatingNetworkRequest) (*DrawIPResponse, error)
	GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error)
	CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error)
	CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolResponse, error)
}

func RegisterNetworkServiceV0Server(s *grpc.Server, srv NetworkServiceV0Server) {
	s.RegisterService(&_NetworkServiceV0_serviceDesc, srv)
}

func _NetworkServiceV0_ListNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceV0Server).ListNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.NetworkServiceV0/ListNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceV0Server).ListNetwork(ctx, req.(*ListNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceV0_GetEstimatedNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEstimatedNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceV0Server).GetEstimatedNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.NetworkServiceV0/GetEstimatedNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceV0Server).GetEstimatedNetwork(ctx, req.(*GetEstimatedNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceV0_DrawIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceV0Server).DrawIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.NetworkServiceV0/DrawIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceV0Server).DrawIP(ctx, req.(*DrawIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceV0_DrawIPEstimatingNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawIPEstimatingNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceV0Server).DrawIPEstimatingNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.NetworkServiceV0/DrawIPEstimatingNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceV0Server).DrawIPEstimatingNetwork(ctx, req.(*DrawIPEstimatingNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceV0_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceV0Server).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.NetworkServiceV0/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceV0Server).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceV0_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceV0Server).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.NetworkServiceV0/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceV0Server).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServiceV0_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceV0Server).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.NetworkServiceV0/CreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceV0Server).CreatePool(ctx, req.(*CreatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServiceV0_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.NetworkServiceV0",
	HandlerType: (*NetworkServiceV0Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetwork",
			Handler:    _NetworkServiceV0_ListNetwork_Handler,
		},
		{
			MethodName: "GetEstimatedNetwork",
			Handler:    _NetworkServiceV0_GetEstimatedNetwork_Handler,
		},
		{
			MethodName: "DrawIP",
			Handler:    _NetworkServiceV0_DrawIP_Handler,
		},
		{
			MethodName: "DrawIPEstimatingNetwork",
			Handler:    _NetworkServiceV0_DrawIPEstimatingNetwork_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _NetworkServiceV0_GetNetwork_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _NetworkServiceV0_CreateNetwork_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _NetworkServiceV0_CreatePool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/server.proto",
}

// Client API for IPServiceV0 service

type IPServiceV0Client interface {
	GetNetworkIncludingIP(ctx context.Context, in *GetNetworkIncludingIPRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	CreateIP(ctx context.Context, in *model.IPAddr, opts ...grpc.CallOption) (*CreateIPResponse, error)
	ActivateIP(ctx context.Context, in *ActivateIPRequest, opts ...grpc.CallOption) (*CreateIPResponse, error)
	DeactivateIP(ctx context.Context, in *DeactivateIPRequest, opts ...grpc.CallOption) (*DeactivateIPResponse, error)
	UpdateIP(ctx context.Context, in *model.IPAddr, opts ...grpc.CallOption) (*UpdateIPResponse, error)
	ListIP(ctx context.Context, in *ListIPRequest, opts ...grpc.CallOption) (*ListIPResponse, error)
	ListTemporaryReservedIP(ctx context.Context, in *ListTemporaryReservedIPRequest, opts ...grpc.CallOption) (*ListTemporaryReservedIPResponse, error)
}

type iPServiceV0Client struct {
	cc *grpc.ClientConn
}

func NewIPServiceV0Client(cc *grpc.ClientConn) IPServiceV0Client {
	return &iPServiceV0Client{cc}
}

func (c *iPServiceV0Client) GetNetworkIncludingIP(ctx context.Context, in *GetNetworkIncludingIPRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	out := new(GetNetworkResponse)
	err := grpc.Invoke(ctx, "/serverpb.IPServiceV0/GetNetworkIncludingIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceV0Client) CreateIP(ctx context.Context, in *model.IPAddr, opts ...grpc.CallOption) (*CreateIPResponse, error) {
	out := new(CreateIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.IPServiceV0/CreateIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceV0Client) ActivateIP(ctx context.Context, in *ActivateIPRequest, opts ...grpc.CallOption) (*CreateIPResponse, error) {
	out := new(CreateIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.IPServiceV0/ActivateIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceV0Client) DeactivateIP(ctx context.Context, in *DeactivateIPRequest, opts ...grpc.CallOption) (*DeactivateIPResponse, error) {
	out := new(DeactivateIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.IPServiceV0/DeactivateIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceV0Client) UpdateIP(ctx context.Context, in *model.IPAddr, opts ...grpc.CallOption) (*UpdateIPResponse, error) {
	out := new(UpdateIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.IPServiceV0/UpdateIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceV0Client) ListIP(ctx context.Context, in *ListIPRequest, opts ...grpc.CallOption) (*ListIPResponse, error) {
	out := new(ListIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.IPServiceV0/ListIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPServiceV0Client) ListTemporaryReservedIP(ctx context.Context, in *ListTemporaryReservedIPRequest, opts ...grpc.CallOption) (*ListTemporaryReservedIPResponse, error) {
	out := new(ListTemporaryReservedIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.IPServiceV0/ListTemporaryReservedIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IPServiceV0 service

type IPServiceV0Server interface {
	GetNetworkIncludingIP(context.Context, *GetNetworkIncludingIPRequest) (*GetNetworkResponse, error)
	CreateIP(context.Context, *model.IPAddr) (*CreateIPResponse, error)
	ActivateIP(context.Context, *ActivateIPRequest) (*CreateIPResponse, error)
	DeactivateIP(context.Context, *DeactivateIPRequest) (*DeactivateIPResponse, error)
	UpdateIP(context.Context, *model.IPAddr) (*UpdateIPResponse, error)
	ListIP(context.Context, *ListIPRequest) (*ListIPResponse, error)
	ListTemporaryReservedIP(context.Context, *ListTemporaryReservedIPRequest) (*ListTemporaryReservedIPResponse, error)
}

func RegisterIPServiceV0Server(s *grpc.Server, srv IPServiceV0Server) {
	s.RegisterService(&_IPServiceV0_serviceDesc, srv)
}

func _IPServiceV0_GetNetworkIncludingIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkIncludingIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceV0Server).GetNetworkIncludingIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.IPServiceV0/GetNetworkIncludingIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceV0Server).GetNetworkIncludingIP(ctx, req.(*GetNetworkIncludingIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPServiceV0_CreateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IPAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceV0Server).CreateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.IPServiceV0/CreateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceV0Server).CreateIP(ctx, req.(*model.IPAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPServiceV0_ActivateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceV0Server).ActivateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.IPServiceV0/ActivateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceV0Server).ActivateIP(ctx, req.(*ActivateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPServiceV0_DeactivateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceV0Server).DeactivateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.IPServiceV0/DeactivateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceV0Server).DeactivateIP(ctx, req.(*DeactivateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPServiceV0_UpdateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.IPAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceV0Server).UpdateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.IPServiceV0/UpdateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceV0Server).UpdateIP(ctx, req.(*model.IPAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPServiceV0_ListIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceV0Server).ListIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.IPServiceV0/ListIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceV0Server).ListIP(ctx, req.(*ListIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPServiceV0_ListTemporaryReservedIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemporaryReservedIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPServiceV0Server).ListTemporaryReservedIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.IPServiceV0/ListTemporaryReservedIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPServiceV0Server).ListTemporaryReservedIP(ctx, req.(*ListTemporaryReservedIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPServiceV0_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.IPServiceV0",
	HandlerType: (*IPServiceV0Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworkIncludingIP",
			Handler:    _IPServiceV0_GetNetworkIncludingIP_Handler,
		},
		{
			MethodName: "CreateIP",
			Handler:    _IPServiceV0_CreateIP_Handler,
		},
		{
			MethodName: "ActivateIP",
			Handler:    _IPServiceV0_ActivateIP_Handler,
		},
		{
			MethodName: "DeactivateIP",
			Handler:    _IPServiceV0_DeactivateIP_Handler,
		},
		{
			MethodName: "UpdateIP",
			Handler:    _IPServiceV0_UpdateIP_Handler,
		},
		{
			MethodName: "ListIP",
			Handler:    _IPServiceV0_ListIP_Handler,
		},
		{
			MethodName: "ListTemporaryReservedIP",
			Handler:    _IPServiceV0_ListTemporaryReservedIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/server.proto",
}

// Client API for PoolServiceV0 service

type PoolServiceV0Client interface {
	ListPool(ctx context.Context, in *ListPoolRequest, opts ...grpc.CallOption) (*ListPoolResponse, error)
	GetIPInPool(ctx context.Context, in *GetIPInPoolRequest, opts ...grpc.CallOption) (*GetIPInPoolResponse, error)
}

type poolServiceV0Client struct {
	cc *grpc.ClientConn
}

func NewPoolServiceV0Client(cc *grpc.ClientConn) PoolServiceV0Client {
	return &poolServiceV0Client{cc}
}

func (c *poolServiceV0Client) ListPool(ctx context.Context, in *ListPoolRequest, opts ...grpc.CallOption) (*ListPoolResponse, error) {
	out := new(ListPoolResponse)
	err := grpc.Invoke(ctx, "/serverpb.PoolServiceV0/ListPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolServiceV0Client) GetIPInPool(ctx context.Context, in *GetIPInPoolRequest, opts ...grpc.CallOption) (*GetIPInPoolResponse, error) {
	out := new(GetIPInPoolResponse)
	err := grpc.Invoke(ctx, "/serverpb.PoolServiceV0/GetIPInPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PoolServiceV0 service

type PoolServiceV0Server interface {
	ListPool(context.Context, *ListPoolRequest) (*ListPoolResponse, error)
	GetIPInPool(context.Context, *GetIPInPoolRequest) (*GetIPInPoolResponse, error)
}

func RegisterPoolServiceV0Server(s *grpc.Server, srv PoolServiceV0Server) {
	s.RegisterService(&_PoolServiceV0_serviceDesc, srv)
}

func _PoolServiceV0_ListPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceV0Server).ListPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.PoolServiceV0/ListPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceV0Server).ListPool(ctx, req.(*ListPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolServiceV0_GetIPInPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPInPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolServiceV0Server).GetIPInPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.PoolServiceV0/GetIPInPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolServiceV0Server).GetIPInPool(ctx, req.(*GetIPInPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PoolServiceV0_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.PoolServiceV0",
	HandlerType: (*PoolServiceV0Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPool",
			Handler:    _PoolServiceV0_ListPool_Handler,
		},
		{
			MethodName: "GetIPInPool",
			Handler:    _PoolServiceV0_GetIPInPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/server.proto",
}

func (m *ListNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, msg := range m.Networks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DrawIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawIPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Mask != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.Mask))
	}
	if m.PoolTag != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.PoolTag.Size()))
		n1, err := m.PoolTag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ActivateImmediately {
		dAtA[i] = 0x28
		i++
		if m.ActivateImmediately {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DrawIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawIPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *DrawIPEstimatingNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawIPEstimatingNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolTag != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.PoolTag.Size()))
		n2, err := m.PoolTag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ActivateImmediately {
		dAtA[i] = 0x10
		i++
		if m.ActivateImmediately {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetNetworkIncludingIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkIncludingIPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	return i, nil
}

func (m *CreateIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateIPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ActivateIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateIPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x12
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeactivateIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeactivateIPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	return i, nil
}

func (m *DeactivateIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeactivateIPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateIPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Mask != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.Mask))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GetEstimatedNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEstimatedNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Network) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if len(m.DefaultGateways) > 0 {
		for _, s := range m.DefaultGateways {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Broadcast) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Broadcast)))
		i += copy(dAtA[i:], m.Broadcast)
	}
	if len(m.Netmask) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Netmask)))
		i += copy(dAtA[i:], m.Netmask)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Mask != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.Mask))
	}
	if len(m.DefaultGateways) > 0 {
		for _, s := range m.DefaultGateways {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x22
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *CreateNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreatePoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePoolRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Mask != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.Mask))
	}
	if m.Pool != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.Pool.Size()))
		n3, err := m.Pool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ips) > 0 {
		for _, msg := range m.Ips {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListTemporaryReservedIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTemporaryReservedIPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListTemporaryReservedIPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTemporaryReservedIPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ips) > 0 {
		for _, msg := range m.Ips {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, msg := range m.Pools {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetIPInPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIPInPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RangeStart) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.RangeStart)))
		i += copy(dAtA[i:], m.RangeStart)
	}
	if len(m.RangeEnd) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.RangeEnd)))
		i += copy(dAtA[i:], m.RangeEnd)
	}
	return i, nil
}

func (m *GetIPInPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIPInPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.Pool.Size()))
		n4, err := m.Pool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Ips) > 0 {
		for _, msg := range m.Ips {
			dAtA[i] = 0x12
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Server(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Server(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ListNetworkRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListNetworkResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, e := range m.Networks {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *DrawIPRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Mask != 0 {
		n += 1 + sovServer(uint64(m.Mask))
	}
	if m.PoolTag != nil {
		l = m.PoolTag.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.ActivateImmediately {
		n += 2
	}
	return n
}

func (m *DrawIPResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *DrawIPEstimatingNetworkRequest) Size() (n int) {
	var l int
	_ = l
	if m.PoolTag != nil {
		l = m.PoolTag.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if m.ActivateImmediately {
		n += 2
	}
	return n
}

func (m *GetNetworkIncludingIPRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *CreateIPResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ActivateIPRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *DeactivateIPRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *DeactivateIPResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateIPResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetNetworkRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Mask != 0 {
		n += 1 + sovServer(uint64(m.Mask))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *GetEstimatedNetworkRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetNetworkResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.DefaultGateways) > 0 {
		for _, s := range m.DefaultGateways {
			l = len(s)
			n += 1 + l + sovServer(uint64(l))
		}
	}
	l = len(m.Broadcast)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.Netmask)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *CreateNetworkRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Mask != 0 {
		n += 1 + sovServer(uint64(m.Mask))
	}
	if len(m.DefaultGateways) > 0 {
		for _, s := range m.DefaultGateways {
			l = len(s)
			n += 1 + l + sovServer(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovServer(uint64(m.Status))
	}
	return n
}

func (m *CreateNetworkResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CreatePoolRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if m.Mask != 0 {
		n += 1 + sovServer(uint64(m.Mask))
	}
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *CreatePoolResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListIPRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListIPResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Ips) > 0 {
		for _, e := range m.Ips {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *ListTemporaryReservedIPRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListTemporaryReservedIPResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Ips) > 0 {
		for _, e := range m.Ips {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *ListPoolRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListPoolResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func (m *GetIPInPoolRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.RangeStart)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.RangeEnd)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	return n
}

func (m *GetIPInPoolResponse) Size() (n int) {
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.Ips) > 0 {
		for _, e := range m.Ips {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func sovServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Networks = append(m.Networks, &model.Network{})
			if err := m.Networks[len(m.Networks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			m.Mask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mask |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolTag == nil {
				m.PoolTag = &model.Tag{}
			}
			if err := m.PoolTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivateImmediately", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActivateImmediately = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawIPEstimatingNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawIPEstimatingNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawIPEstimatingNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolTag == nil {
				m.PoolTag = &model.Tag{}
			}
			if err := m.PoolTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivateImmediately", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ActivateImmediately = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkIncludingIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkIncludingIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkIncludingIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &model.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeactivateIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeactivateIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeactivateIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeactivateIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeactivateIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeactivateIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			m.Mask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mask |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEstimatedNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEstimatedNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEstimatedNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGateways", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGateways = append(m.DefaultGateways, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Broadcast = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netmask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Netmask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &model.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			m.Mask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mask |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGateways", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGateways = append(m.DefaultGateways, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &model.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (model.Network_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			m.Mask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mask |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &model.Pool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ips = append(m.Ips, &model.IPAddr{})
			if err := m.Ips[len(m.Ips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTemporaryReservedIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTemporaryReservedIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTemporaryReservedIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTemporaryReservedIPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTemporaryReservedIPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTemporaryReservedIPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ips = append(m.Ips, &model.IPAddr{})
			if err := m.Ips[len(m.Ips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &model.Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIPInPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIPInPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIPInPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeStart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RangeStart = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeEnd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RangeEnd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIPInPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIPInPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIPInPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &model.Pool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ips = append(m.Ips, &model.IPAddr{})
			if err := m.Ips[len(m.Ips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("server/serverpb/server.proto", fileDescriptorServer) }

var fileDescriptorServer = []byte{
	// 1462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xff, 0x8e, 0xf3, 0xa3, 0xce, 0xf3, 0x37, 0x89, 0x33, 0x49, 0x13, 0xd7, 0x75, 0xed, 0x74,
	0xbf, 0xfd, 0x52, 0xa7, 0x60, 0xaf, 0xe3, 0x52, 0x50, 0x2b, 0x71, 0x68, 0x69, 0x55, 0x59, 0x20,
	0x14, 0xb9, 0xe1, 0x87, 0x9a, 0x86, 0x68, 0x92, 0x9d, 0x6e, 0xb7, 0xb6, 0x77, 0xb7, 0xbb, 0xe3,
	0x44, 0x25, 0x31, 0x45, 0x1c, 0x2a, 0x90, 0x10, 0x42, 0x2a, 0x42, 0x88, 0x0b, 0x27, 0x0e, 0xdc,
	0x11, 0x47, 0x2e, 0x5c, 0xe0, 0x86, 0xc4, 0x1f, 0x50, 0x14, 0x38, 0xf2, 0x0f, 0x70, 0x43, 0x3b,
	0x3b, 0xe3, 0xdd, 0xb5, 0x77, 0x4d, 0xb9, 0xb4, 0xb9, 0xc4, 0xb3, 0xf3, 0xde, 0xcc, 0xfb, 0xbc,
	0xcf, 0x9b, 0xf7, 0xe6, 0x4d, 0xa0, 0xe0, 0x52, 0x67, 0x97, 0x3a, 0xaa, 0xff, 0x63, 0x6f, 0x8b,
	0x41, 0xd5, 0x76, 0x2c, 0x66, 0xe1, 0xb4, 0x9c, 0xce, 0x17, 0x74, 0xcb, 0xd2, 0xdb, 0x54, 0x25,
	0xb6, 0xa1, 0x12, 0xd3, 0xb4, 0x18, 0x61, 0x86, 0x65, 0xba, 0xbe, 0x5e, 0xfe, 0x25, 0xdd, 0x60,
	0x77, 0xba, 0xdb, 0xd5, 0x1d, 0xab, 0xa3, 0x76, 0xf6, 0x0c, 0xd6, 0xb2, 0xf6, 0x54, 0xdd, 0xaa,
	0x70, 0x61, 0x65, 0x97, 0xb4, 0x0d, 0x8d, 0x30, 0xcb, 0x71, 0xd5, 0xfe, 0x50, 0xac, 0xab, 0x85,
	0xd6, 0x31, 0xd2, 0xea, 0x56, 0x5a, 0xaa, 0x61, 0x6b, 0x0e, 0xd9, 0xa3, 0x8e, 0x6a, 0xb7, 0x74,
	0xb5, 0x63, 0x69, 0xb4, 0xed, 0xff, 0x15, 0x2b, 0x2a, 0xa1, 0x15, 0xba, 0xa5, 0x5b, 0x2a, 0x9f,
	0xde, 0xee, 0xde, 0xe6, 0x5f, 0xfc, 0x83, 0x8f, 0x7c, 0x75, 0x65, 0x01, 0xf0, 0xeb, 0x86, 0xcb,
	0xde, 0xa0, 0x6c, 0xcf, 0x72, 0x5a, 0x4d, 0x7a, 0xaf, 0x4b, 0x5d, 0xa6, 0x5c, 0x86, 0xf9, 0xc8,
	0xac, 0x6b, 0x5b, 0xa6, 0x4b, 0xf1, 0x39, 0x48, 0x9b, 0xfe, 0x94, 0x9b, 0x43, 0xcb, 0x63, 0xe5,
	0x4c, 0x7d, 0xa6, 0xea, 0xdb, 0x96, 0x9a, 0x7d, 0xb9, 0xf2, 0x79, 0x0a, 0xa6, 0xaf, 0x3a, 0x64,
	0xaf, 0xb1, 0x26, 0x36, 0xc5, 0x1f, 0x20, 0x48, 0x19, 0x76, 0x0e, 0x2d, 0xa3, 0xf2, 0xd4, 0x15,
	0xfb, 0xf0, 0x71, 0xa9, 0x0d, 0x77, 0x0f, 0xde, 0x2d, 0x97, 0x37, 0x6a, 0x95, 0x8b, 0x9b, 0x07,
	0x1b, 0xab, 0x95, 0x8b, 0x9b, 0xfe, 0x70, 0x95, 0xff, 0xec, 0xd7, 0x7b, 0x07, 0xf5, 0x8d, 0x5a,
	0xe5, 0x45, 0x31, 0x5b, 0xbf, 0xb0, 0x51, 0xab, 0x5c, 0xd8, 0x5c, 0xb9, 0x55, 0x5d, 0xd9, 0x3f,
	0xdf, 0xfb, 0xb7, 0xab, 0xce, 0x34, 0x53, 0x86, 0x8d, 0x31, 0x8c, 0x77, 0x88, 0xdb, 0xca, 0xa5,
	0x96, 0x51, 0x79, 0xa2, 0xc9, 0xc7, 0xf8, 0xff, 0x90, 0xb6, 0x2d, 0xab, 0xbd, 0xc5, 0x88, 0x9e,
	0x1b, 0x5b, 0x46, 0xe5, 0x4c, 0x1d, 0x84, 0x53, 0xeb, 0x44, 0x6f, 0x1e, 0xf3, 0x64, 0xeb, 0x44,
	0xf7, 0x96, 0x9a, 0xa4, 0x43, 0x73, 0xe3, 0x1e, 0xfc, 0x26, 0x1f, 0xe3, 0x55, 0x58, 0x20, 0x3b,
	0xcc, 0xd8, 0x25, 0x8c, 0x6e, 0x19, 0x9d, 0x0e, 0xd5, 0x0c, 0xc2, 0x68, 0xfb, 0x7e, 0x6e, 0x62,
	0x19, 0x95, 0xd3, 0xcd, 0x79, 0x29, 0x6b, 0x04, 0x22, 0xe5, 0x12, 0xcc, 0x48, 0x56, 0x04, 0xa9,
	0x33, 0x01, 0x2b, 0x1c, 0x63, 0x0e, 0x8e, 0x75, 0xa8, 0xeb, 0x12, 0x9d, 0x72, 0x98, 0x53, 0x4d,
	0xf9, 0xa9, 0xbc, 0x07, 0x45, 0x7f, 0xed, 0x35, 0x97, 0x19, 0x1d, 0xc2, 0x0c, 0x53, 0x8f, 0xc6,
	0x2d, 0xe2, 0x0b, 0x4a, 0xf6, 0x25, 0x09, 0x77, 0x2a, 0x19, 0xf7, 0xd7, 0x08, 0x0a, 0xd7, 0xa9,
	0x3c, 0x11, 0x0d, 0x73, 0xa7, 0xdd, 0xd5, 0x0c, 0x53, 0x0f, 0xa2, 0xfb, 0x20, 0x14, 0x5c, 0xeb,
	0xf0, 0x71, 0xa9, 0x05, 0xc6, 0x53, 0x8d, 0xad, 0x82, 0x21, 0xfb, 0xaa, 0x43, 0x3d, 0xd8, 0x7d,
	0x6e, 0x95, 0xef, 0x10, 0xcc, 0x5d, 0x96, 0xde, 0x1c, 0x19, 0xa8, 0xb8, 0x08, 0xe3, 0x8c, 0xe8,
	0x6e, 0x2e, 0xc5, 0x73, 0x28, 0x1c, 0x22, 0x3e, 0xaf, 0x7c, 0x81, 0x60, 0xfe, 0x2a, 0x25, 0x47,
	0x0e, 0xb8, 0xb2, 0x08, 0x0b, 0x51, 0x5c, 0x82, 0x67, 0x0c, 0xd9, 0x37, 0x6d, 0x2d, 0x3a, 0xf7,
	0x03, 0x82, 0xb9, 0xe0, 0xc4, 0x1c, 0xf1, 0x22, 0x20, 0xb3, 0x7b, 0x2c, 0xc8, 0x6e, 0xa5, 0x00,
	0xf9, 0xeb, 0x94, 0x89, 0x5c, 0xa3, 0xda, 0x40, 0x89, 0xfc, 0x31, 0x05, 0x38, 0xec, 0x9e, 0xc8,
	0xe6, 0x6f, 0x11, 0x1c, 0x13, 0x35, 0x50, 0x38, 0xf9, 0x29, 0x3a, 0x7c, 0x5c, 0xfa, 0x18, 0xc1,
	0x43, 0xf4, 0xb4, 0xdc, 0x54, 0xcb, 0x61, 0x2d, 0xae, 0x72, 0x71, 0xf3, 0xe0, 0xfc, 0x46, 0xad,
	0x52, 0xf7, 0x38, 0x90, 0xf8, 0xf0, 0x0a, 0x64, 0x35, 0x7a, 0x9b, 0x74, 0xdb, 0x6c, 0x4b, 0x27,
	0x8c, 0xee, 0x91, 0xfb, 0xfe, 0x91, 0x9c, 0x6a, 0xce, 0x8a, 0xf9, 0xeb, 0x62, 0x1a, 0x17, 0x60,
	0x6a, 0xdb, 0xb1, 0x88, 0xb6, 0x43, 0x5c, 0x26, 0x48, 0x0a, 0x26, 0xbc, 0x92, 0x65, 0x52, 0xc6,
	0x49, 0xf5, 0xcb, 0xa3, 0xfc, 0xec, 0x9f, 0xf4, 0x89, 0x84, 0x93, 0xfe, 0x4d, 0x0a, 0x16, 0xfc,
	0xac, 0x1d, 0x38, 0x27, 0xcf, 0x3c, 0x47, 0xe3, 0x4e, 0x49, 0x1c, 0x61, 0x63, 0xf1, 0x84, 0x49,
	0xc7, 0xc7, 0xe3, 0x1d, 0xc7, 0x15, 0x98, 0x74, 0x19, 0x61, 0x5d, 0x97, 0x5f, 0x16, 0x33, 0xf5,
	0xe3, 0xd1, 0x8b, 0xb4, 0x7a, 0x83, 0x0b, 0x9b, 0x42, 0x49, 0x59, 0x82, 0xe3, 0x03, 0x34, 0x89,
	0x2c, 0xfb, 0x19, 0xc1, 0x9c, 0x2f, 0x59, 0xb3, 0xac, 0xf6, 0x91, 0x66, 0xaf, 0x04, 0xe3, 0xde,
	0x05, 0x24, 0x2e, 0xd9, 0x8c, 0x70, 0x98, 0xc3, 0xe6, 0x02, 0xaf, 0x17, 0x09, 0xbb, 0x22, 0x3c,
	0x9c, 0x85, 0x69, 0xaf, 0x17, 0xe9, 0x57, 0x41, 0x65, 0x15, 0x66, 0xe4, 0x84, 0x48, 0xba, 0x12,
	0x8c, 0x19, 0xb6, 0x6c, 0x49, 0xa6, 0xc5, 0xc6, 0x8d, 0xb5, 0xcb, 0x9a, 0xe6, 0x34, 0x3d, 0x89,
	0xb2, 0x0c, 0x45, 0x6f, 0xc9, 0x3a, 0xed, 0xd8, 0x96, 0x43, 0x9c, 0xfb, 0x4d, 0xca, 0xfb, 0x36,
	0x2d, 0xd8, 0xf4, 0x0a, 0x94, 0x12, 0x35, 0x9e, 0xd4, 0xca, 0x1c, 0xcc, 0x7a, 0x7b, 0x84, 0x02,
	0xa1, 0x5c, 0x80, 0x6c, 0x30, 0x25, 0xf6, 0x39, 0x0d, 0x13, 0x9e, 0xbb, 0x72, 0xa7, 0x08, 0x11,
	0xbe, 0x44, 0xf9, 0xde, 0x2f, 0x2e, 0x8d, 0xb5, 0x86, 0x19, 0x0e, 0xeb, 0x67, 0x08, 0x32, 0x0e,
	0x31, 0x75, 0xba, 0xe5, 0x32, 0xe2, 0xb0, 0x67, 0x15, 0x60, 0xe0, 0x18, 0x6e, 0x78, 0x10, 0xf0,
	0x27, 0x08, 0xa6, 0x7c, 0x48, 0xd4, 0xd4, 0xfc, 0x86, 0xe5, 0xe9, 0x03, 0x4a, 0x73, 0x04, 0xd7,
	0x4c, 0x4d, 0x79, 0x1b, 0xe6, 0x23, 0xbc, 0xf5, 0x43, 0xe7, 0x1f, 0x3d, 0x94, 0x70, 0xf4, 0x64,
	0x6c, 0x53, 0x49, 0xb1, 0xad, 0xff, 0x35, 0x09, 0x59, 0x91, 0x7b, 0x37, 0xa8, 0xb3, 0x6b, 0xec,
	0xd0, 0xb7, 0x6a, 0xf8, 0x0e, 0x64, 0x42, 0x6d, 0x32, 0x2e, 0x54, 0xe5, 0x6b, 0xa0, 0x3a, 0xdc,
	0x53, 0xe7, 0x4f, 0x25, 0x48, 0xc5, 0x31, 0x2f, 0x7c, 0xf8, 0xeb, 0x1f, 0x8f, 0x52, 0x8b, 0x78,
	0x81, 0xbf, 0x20, 0x76, 0x6b, 0xaa, 0xa8, 0xd2, 0x6a, 0xdb, 0x70, 0x19, 0x76, 0xb8, 0x5f, 0x83,
	0x77, 0x11, 0x3e, 0x13, 0xec, 0x99, 0x7c, 0x55, 0xe5, 0x0b, 0x11, 0xad, 0x41, 0xc3, 0x4b, 0xdc,
	0xf0, 0x1c, 0x9e, 0x1d, 0x30, 0x8c, 0x3f, 0x42, 0x30, 0xe9, 0xf7, 0x9b, 0x78, 0x29, 0xd8, 0x21,
	0xd2, 0xd3, 0xe7, 0x73, 0xc3, 0x02, 0xb1, 0xed, 0x6b, 0x7c, 0xdb, 0x6b, 0x58, 0x19, 0xf4, 0x67,
	0xdf, 0xb0, 0x7b, 0xea, 0xbe, 0x57, 0x11, 0x7a, 0xaa, 0xf7, 0x92, 0x31, 0xec, 0x9b, 0x25, 0x7c,
	0x6a, 0x48, 0xcb, 0xbb, 0x82, 0xa5, 0x02, 0xee, 0xc2, 0x52, 0x42, 0xe7, 0x8b, 0xcb, 0x83, 0x08,
	0x92, 0x9a, 0xe3, 0x11, 0x58, 0x17, 0x39, 0xd6, 0x2c, 0x9e, 0x91, 0x28, 0x84, 0xd9, 0x87, 0x08,
	0x20, 0x60, 0x0c, 0x9f, 0x8c, 0xe7, 0xf1, 0x49, 0x48, 0x7e, 0x85, 0x5b, 0x78, 0x19, 0x9f, 0x1c,
	0xc1, 0xc6, 0xcd, 0x1c, 0x5e, 0x8c, 0xa7, 0x01, 0x3f, 0x80, 0xe9, 0x48, 0xf9, 0xc7, 0xc5, 0xc0,
	0x5a, 0xdc, 0xf5, 0x99, 0x2f, 0x25, 0xca, 0x05, 0xa0, 0x0a, 0x07, 0x74, 0x56, 0x19, 0x19, 0x9e,
	0x1d, 0xbe, 0xf4, 0x12, 0x3a, 0x87, 0xf7, 0x01, 0x82, 0xd2, 0x1c, 0x26, 0x62, 0xe8, 0xee, 0x09,
	0x13, 0x11, 0x53, 0xcd, 0xeb, 0xdc, 0xee, 0x0b, 0xca, 0xd9, 0x51, 0x76, 0xbd, 0x94, 0x0c, 0x8c,
	0xd7, 0x1f, 0x4d, 0x42, 0xa6, 0xb1, 0x16, 0xa4, 0xdd, 0xfb, 0x70, 0x3c, 0xf6, 0x29, 0x82, 0x9f,
	0x8b, 0x8b, 0xc1, 0xf0, 0x5b, 0xe5, 0x1f, 0x62, 0x55, 0xe2, 0x10, 0x4f, 0xe0, 0x25, 0x09, 0xd1,
	0xb0, 0x7d, 0x74, 0x32, 0x31, 0xde, 0x81, 0xb4, 0x7c, 0x69, 0xe0, 0x68, 0xad, 0xc8, 0xe7, 0x07,
	0x9d, 0x0f, 0x9d, 0xb2, 0xd3, 0x7c, 0xdf, 0x93, 0xca, 0xe2, 0xe0, 0xbe, 0x01, 0xcd, 0x77, 0x01,
	0x82, 0xe7, 0x4a, 0x98, 0xe6, 0xa1, 0x47, 0xcc, 0x48, 0x4b, 0xff, 0xe3, 0x96, 0x4e, 0x29, 0xb9,
	0x41, 0x4b, 0xb2, 0x75, 0xf7, 0x6c, 0xdd, 0x83, 0xff, 0x86, 0x7b, 0x79, 0x1c, 0xaa, 0x4f, 0x31,
	0x6f, 0x8f, 0x7c, 0x31, 0x49, 0x2c, 0x6c, 0x2a, 0xdc, 0x66, 0x41, 0xc9, 0x0f, 0xda, 0xd4, 0xfa,
	0xda, 0x1e, 0x71, 0xf2, 0x99, 0x30, 0x82, 0xb8, 0xa1, 0x97, 0x44, 0x22, 0x71, 0x5d, 0xae, 0xe9,
	0x39, 0xb3, 0x0e, 0x93, 0x7e, 0x4f, 0x10, 0x2e, 0x55, 0x91, 0xb6, 0x21, 0x9c, 0xfe, 0xd1, 0xf6,
	0x61, 0xb8, 0x02, 0x1a, 0xb6, 0x5f, 0x75, 0xbf, 0x42, 0xb0, 0x94, 0xd0, 0x15, 0x84, 0xeb, 0xce,
	0xe8, 0xd6, 0x22, 0xbf, 0xf2, 0x04, 0x9a, 0x02, 0xc9, 0x39, 0x8e, 0xe4, 0x4c, 0x50, 0x34, 0x0d,
	0x5b, 0x65, 0x52, 0x7f, 0xcb, 0x11, 0x0b, 0x38, 0xb8, 0xfa, 0x9f, 0x08, 0xa6, 0xbd, 0xd4, 0x0a,
	0xf2, 0xe2, 0x16, 0xa4, 0x65, 0xb3, 0x81, 0x4f, 0x44, 0x8d, 0x86, 0x13, 0x34, 0x1f, 0x27, 0x12,
	0x00, 0x4e, 0x70, 0x00, 0xf3, 0x78, 0x4e, 0x02, 0xe0, 0xa9, 0xc8, 0xc9, 0xe8, 0x41, 0x26, 0x74,
	0xb5, 0xe2, 0x68, 0x0e, 0x0d, 0x74, 0x2a, 0xe1, 0xcb, 0x2e, 0xe6, 0x3e, 0x56, 0x56, 0xb9, 0x99,
	0xe7, 0xf1, 0x4a, 0xc4, 0xcc, 0x7e, 0xa8, 0xb7, 0xe9, 0xc9, 0x2f, 0x6a, 0x6a, 0x3d, 0xd5, 0xb0,
	0xaf, 0x64, 0x7f, 0x3a, 0x2c, 0xa2, 0x5f, 0x0e, 0x8b, 0xe8, 0xb7, 0xc3, 0x22, 0xfa, 0xf2, 0xf7,
	0xe2, 0x7f, 0xb6, 0x27, 0xf9, 0x7f, 0xb0, 0xce, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x8c,
	0x68, 0xfd, 0xa2, 0x13, 0x00, 0x00,
}
