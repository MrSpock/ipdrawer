// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/serverpb/server.proto

/*
Package serverpb is a generated protocol buffer package.

It is generated from these files:
	server/serverpb/server.proto

It has these top-level messages:
	DrawIPRequest
	DrawIPResponse
	GetPrefixIncludingIPRequest
	GetPrefixIncludingIPResponse
	ActivateIPRequest
	ActivateIPResponse
	CreatePrefixRequest
	CreatePrefixResponse
	CreatePoolsRequest
	CreatePoolsResponse
	Tag
	Pool
*/
package serverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/mwitkow/go-proto-validators"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DrawIPRequest struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Mask int32  `protobuf:"varint,2,opt,name=mask" json:"mask,omitempty"`
	Tags []*Tag `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *DrawIPRequest) Reset()                    { *m = DrawIPRequest{} }
func (m *DrawIPRequest) String() string            { return proto.CompactTextString(m) }
func (*DrawIPRequest) ProtoMessage()               {}
func (*DrawIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DrawIPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *DrawIPRequest) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *DrawIPRequest) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type DrawIPResponse struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *DrawIPResponse) Reset()                    { *m = DrawIPResponse{} }
func (m *DrawIPResponse) String() string            { return proto.CompactTextString(m) }
func (*DrawIPResponse) ProtoMessage()               {}
func (*DrawIPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DrawIPResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type GetPrefixIncludingIPRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *GetPrefixIncludingIPRequest) Reset()                    { *m = GetPrefixIncludingIPRequest{} }
func (m *GetPrefixIncludingIPRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPrefixIncludingIPRequest) ProtoMessage()               {}
func (*GetPrefixIncludingIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetPrefixIncludingIPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type GetPrefixIncludingIPResponse struct {
}

func (m *GetPrefixIncludingIPResponse) Reset()                    { *m = GetPrefixIncludingIPResponse{} }
func (m *GetPrefixIncludingIPResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPrefixIncludingIPResponse) ProtoMessage()               {}
func (*GetPrefixIncludingIPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ActivateIPRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *ActivateIPRequest) Reset()                    { *m = ActivateIPRequest{} }
func (m *ActivateIPRequest) String() string            { return proto.CompactTextString(m) }
func (*ActivateIPRequest) ProtoMessage()               {}
func (*ActivateIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ActivateIPRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type ActivateIPResponse struct {
}

func (m *ActivateIPResponse) Reset()                    { *m = ActivateIPResponse{} }
func (m *ActivateIPResponse) String() string            { return proto.CompactTextString(m) }
func (*ActivateIPResponse) ProtoMessage()               {}
func (*ActivateIPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type CreatePrefixRequest struct {
	Ip              string   `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Mask            int32    `protobuf:"varint,2,opt,name=mask" json:"mask,omitempty"`
	DefaultGateways []string `protobuf:"bytes,3,rep,name=default_gateways,json=defaultGateways" json:"default_gateways,omitempty"`
	Broadcast       string   `protobuf:"bytes,4,opt,name=broadcast" json:"broadcast,omitempty"`
	Netmask         string   `protobuf:"bytes,5,opt,name=netmask" json:"netmask,omitempty"`
	Tags            []*Tag   `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
}

func (m *CreatePrefixRequest) Reset()                    { *m = CreatePrefixRequest{} }
func (m *CreatePrefixRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePrefixRequest) ProtoMessage()               {}
func (*CreatePrefixRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreatePrefixRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CreatePrefixRequest) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *CreatePrefixRequest) GetDefaultGateways() []string {
	if m != nil {
		return m.DefaultGateways
	}
	return nil
}

func (m *CreatePrefixRequest) GetBroadcast() string {
	if m != nil {
		return m.Broadcast
	}
	return ""
}

func (m *CreatePrefixRequest) GetNetmask() string {
	if m != nil {
		return m.Netmask
	}
	return ""
}

func (m *CreatePrefixRequest) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CreatePrefixResponse struct {
}

func (m *CreatePrefixResponse) Reset()                    { *m = CreatePrefixResponse{} }
func (m *CreatePrefixResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePrefixResponse) ProtoMessage()               {}
func (*CreatePrefixResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type CreatePoolsRequest struct {
	Ip    string  `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Mask  int32   `protobuf:"varint,2,opt,name=mask" json:"mask,omitempty"`
	Pools []*Pool `protobuf:"bytes,3,rep,name=pools" json:"pools,omitempty"`
}

func (m *CreatePoolsRequest) Reset()                    { *m = CreatePoolsRequest{} }
func (m *CreatePoolsRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePoolsRequest) ProtoMessage()               {}
func (*CreatePoolsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreatePoolsRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *CreatePoolsRequest) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *CreatePoolsRequest) GetPools() []*Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

type CreatePoolsResponse struct {
}

func (m *CreatePoolsResponse) Reset()                    { *m = CreatePoolsResponse{} }
func (m *CreatePoolsResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePoolsResponse) ProtoMessage()               {}
func (*CreatePoolsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Tag struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Tag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Pool struct {
	Start  string `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End    string `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *Pool) Reset()                    { *m = Pool{} }
func (m *Pool) String() string            { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()               {}
func (*Pool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Pool) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Pool) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *Pool) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*DrawIPRequest)(nil), "serverpb.DrawIPRequest")
	proto.RegisterType((*DrawIPResponse)(nil), "serverpb.DrawIPResponse")
	proto.RegisterType((*GetPrefixIncludingIPRequest)(nil), "serverpb.GetPrefixIncludingIPRequest")
	proto.RegisterType((*GetPrefixIncludingIPResponse)(nil), "serverpb.GetPrefixIncludingIPResponse")
	proto.RegisterType((*ActivateIPRequest)(nil), "serverpb.ActivateIPRequest")
	proto.RegisterType((*ActivateIPResponse)(nil), "serverpb.ActivateIPResponse")
	proto.RegisterType((*CreatePrefixRequest)(nil), "serverpb.CreatePrefixRequest")
	proto.RegisterType((*CreatePrefixResponse)(nil), "serverpb.CreatePrefixResponse")
	proto.RegisterType((*CreatePoolsRequest)(nil), "serverpb.CreatePoolsRequest")
	proto.RegisterType((*CreatePoolsResponse)(nil), "serverpb.CreatePoolsResponse")
	proto.RegisterType((*Tag)(nil), "serverpb.Tag")
	proto.RegisterType((*Pool)(nil), "serverpb.Pool")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PrefixService service

type PrefixServiceClient interface {
	DrawIP(ctx context.Context, in *DrawIPRequest, opts ...grpc.CallOption) (*DrawIPResponse, error)
	GetPrefixIncludingIP(ctx context.Context, in *GetPrefixIncludingIPRequest, opts ...grpc.CallOption) (*GetPrefixIncludingIPResponse, error)
	ActivateIP(ctx context.Context, in *ActivateIPRequest, opts ...grpc.CallOption) (*ActivateIPResponse, error)
	CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*CreatePrefixResponse, error)
	CreatePools(ctx context.Context, in *CreatePoolsRequest, opts ...grpc.CallOption) (*CreatePoolsResponse, error)
}

type prefixServiceClient struct {
	cc *grpc.ClientConn
}

func NewPrefixServiceClient(cc *grpc.ClientConn) PrefixServiceClient {
	return &prefixServiceClient{cc}
}

func (c *prefixServiceClient) DrawIP(ctx context.Context, in *DrawIPRequest, opts ...grpc.CallOption) (*DrawIPResponse, error) {
	out := new(DrawIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.PrefixService/DrawIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prefixServiceClient) GetPrefixIncludingIP(ctx context.Context, in *GetPrefixIncludingIPRequest, opts ...grpc.CallOption) (*GetPrefixIncludingIPResponse, error) {
	out := new(GetPrefixIncludingIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.PrefixService/GetPrefixIncludingIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prefixServiceClient) ActivateIP(ctx context.Context, in *ActivateIPRequest, opts ...grpc.CallOption) (*ActivateIPResponse, error) {
	out := new(ActivateIPResponse)
	err := grpc.Invoke(ctx, "/serverpb.PrefixService/ActivateIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prefixServiceClient) CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*CreatePrefixResponse, error) {
	out := new(CreatePrefixResponse)
	err := grpc.Invoke(ctx, "/serverpb.PrefixService/CreatePrefix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prefixServiceClient) CreatePools(ctx context.Context, in *CreatePoolsRequest, opts ...grpc.CallOption) (*CreatePoolsResponse, error) {
	out := new(CreatePoolsResponse)
	err := grpc.Invoke(ctx, "/serverpb.PrefixService/CreatePools", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PrefixService service

type PrefixServiceServer interface {
	DrawIP(context.Context, *DrawIPRequest) (*DrawIPResponse, error)
	GetPrefixIncludingIP(context.Context, *GetPrefixIncludingIPRequest) (*GetPrefixIncludingIPResponse, error)
	ActivateIP(context.Context, *ActivateIPRequest) (*ActivateIPResponse, error)
	CreatePrefix(context.Context, *CreatePrefixRequest) (*CreatePrefixResponse, error)
	CreatePools(context.Context, *CreatePoolsRequest) (*CreatePoolsResponse, error)
}

func RegisterPrefixServiceServer(s *grpc.Server, srv PrefixServiceServer) {
	s.RegisterService(&_PrefixService_serviceDesc, srv)
}

func _PrefixService_DrawIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrefixServiceServer).DrawIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.PrefixService/DrawIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrefixServiceServer).DrawIP(ctx, req.(*DrawIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrefixService_GetPrefixIncludingIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrefixIncludingIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrefixServiceServer).GetPrefixIncludingIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.PrefixService/GetPrefixIncludingIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrefixServiceServer).GetPrefixIncludingIP(ctx, req.(*GetPrefixIncludingIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrefixService_ActivateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrefixServiceServer).ActivateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.PrefixService/ActivateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrefixServiceServer).ActivateIP(ctx, req.(*ActivateIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrefixService_CreatePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrefixServiceServer).CreatePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.PrefixService/CreatePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrefixServiceServer).CreatePrefix(ctx, req.(*CreatePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrefixService_CreatePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrefixServiceServer).CreatePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.PrefixService/CreatePools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrefixServiceServer).CreatePools(ctx, req.(*CreatePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrefixService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.PrefixService",
	HandlerType: (*PrefixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DrawIP",
			Handler:    _PrefixService_DrawIP_Handler,
		},
		{
			MethodName: "GetPrefixIncludingIP",
			Handler:    _PrefixService_GetPrefixIncludingIP_Handler,
		},
		{
			MethodName: "ActivateIP",
			Handler:    _PrefixService_ActivateIP_Handler,
		},
		{
			MethodName: "CreatePrefix",
			Handler:    _PrefixService_CreatePrefix_Handler,
		},
		{
			MethodName: "CreatePools",
			Handler:    _PrefixService_CreatePools_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/server.proto",
}

func init() { proto.RegisterFile("server/serverpb/server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xd6, 0xe6, 0xeb, 0x7d, 0x3b, 0x25, 0xa5, 0xdd, 0x7e, 0x59, 0x69, 0xda, 0xa4, 0x56, 0x5b,
	0xa5, 0x12, 0x89, 0xd3, 0x94, 0x22, 0xf5, 0xc0, 0x81, 0x82, 0x54, 0xf5, 0x56, 0x99, 0x1e, 0x90,
	0x42, 0x40, 0x9b, 0x64, 0x6b, 0xac, 0xa4, 0xb6, 0xb1, 0x37, 0x49, 0xab, 0x34, 0x42, 0xea, 0x01,
	0x89, 0x0b, 0x17, 0x38, 0x23, 0x71, 0xe0, 0x97, 0xf0, 0x0f, 0xe0, 0xc6, 0x25, 0x52, 0xc4, 0x89,
	0x3f, 0x01, 0xf2, 0xee, 0xa6, 0x4e, 0xd4, 0x04, 0xc4, 0x05, 0xb5, 0xb9, 0x78, 0x3d, 0xcf, 0xec,
	0xcc, 0xf3, 0xcc, 0x8e, 0x67, 0x03, 0x49, 0x8f, 0xba, 0x4d, 0xea, 0x6a, 0xe2, 0xe1, 0x94, 0xe5,
	0x22, 0xe7, 0xb8, 0x36, 0xb3, 0xf1, 0xff, 0x7d, 0x73, 0x22, 0x69, 0xd8, 0xb6, 0x51, 0xa7, 0x1a,
	0x71, 0x4c, 0x8d, 0x58, 0x96, 0xcd, 0x08, 0x33, 0x6d, 0xcb, 0x13, 0x7e, 0x89, 0x7b, 0x86, 0xc9,
	0x5e, 0x34, 0xca, 0xb9, 0x8a, 0x7d, 0xa2, 0x9d, 0xb4, 0x4c, 0x56, 0xb3, 0x5b, 0x9a, 0x61, 0x67,
	0x39, 0x98, 0x6d, 0x92, 0xba, 0x59, 0x25, 0xcc, 0x76, 0x3d, 0xed, 0x72, 0x29, 0xf6, 0xa9, 0xdf,
	0x10, 0xc4, 0x1f, 0xb9, 0xa4, 0x75, 0x70, 0xa8, 0xd3, 0x97, 0x0d, 0xea, 0x31, 0xfc, 0x0a, 0x42,
	0xa6, 0xa3, 0xa0, 0x34, 0xca, 0x4c, 0xec, 0xd9, 0xbd, 0x6e, 0xaa, 0x06, 0xe6, 0xb3, 0x4c, 0xa6,
	0x98, 0xcf, 0xee, 0x96, 0xce, 0x8b, 0x5b, 0xd9, 0xdd, 0x92, 0x58, 0x6e, 0xf1, 0x47, 0xbb, 0xd0,
	0x39, 0x2f, 0x14, 0xf3, 0xd9, 0xbb, 0xd2, 0x5a, 0xd8, 0x29, 0xe6, 0xb3, 0x3b, 0xa5, 0xcd, 0xa7,
	0xb9, 0xcd, 0xf6, 0x76, 0xe7, 0x6f, 0x77, 0xad, 0xe9, 0x21, 0xd3, 0xc1, 0xeb, 0x10, 0x39, 0x21,
	0x5e, 0x4d, 0x09, 0xa5, 0x51, 0x26, 0xba, 0x37, 0xd3, 0xeb, 0xa6, 0xe2, 0xd3, 0x3f, 0xfb, 0x3f,
	0xa4, 0xac, 0xea, 0x1c, 0xc6, 0xab, 0x10, 0x61, 0xc4, 0xf0, 0x94, 0x70, 0x3a, 0x9c, 0x99, 0x2c,
	0xc4, 0x73, 0xfd, 0x42, 0xe5, 0x8e, 0x88, 0xa1, 0x73, 0x48, 0x4d, 0xc3, 0x54, 0x5f, 0x9b, 0xe7,
	0xd8, 0x96, 0x47, 0xf1, 0x54, 0x20, 0xce, 0xcf, 0xa5, 0x7e, 0x40, 0xb0, 0xb4, 0x4f, 0xd9, 0xa1,
	0x4b, 0x8f, 0xcd, 0xd3, 0x03, 0xab, 0x52, 0x6f, 0x54, 0x4d, 0xcb, 0xb8, 0x3e, 0xc5, 0x50, 0x57,
	0x20, 0x39, 0x9a, 0x9f, 0x10, 0xa4, 0xbe, 0x47, 0x30, 0xf3, 0xa0, 0xc2, 0xcc, 0x26, 0x61, 0xf4,
	0x1a, 0xd1, 0x9e, 0x03, 0x3c, 0xc8, 0x4a, 0x92, 0xfd, 0x1c, 0x82, 0xd9, 0x87, 0x2e, 0x25, 0x8c,
	0x0a, 0x41, 0x37, 0xad, 0xe5, 0x36, 0x61, 0xba, 0x4a, 0x8f, 0x49, 0xa3, 0xce, 0x9e, 0x1b, 0x84,
	0xd1, 0x16, 0x39, 0x13, 0xed, 0x37, 0xa1, 0xdf, 0x96, 0xf6, 0x7d, 0x69, 0xc6, 0x49, 0x98, 0x28,
	0xbb, 0x36, 0xa9, 0x56, 0x88, 0xc7, 0x94, 0x08, 0xef, 0xb7, 0xc0, 0x80, 0x15, 0xf8, 0xcf, 0xa2,
	0x8c, 0xa7, 0x8c, 0x72, 0xac, 0xff, 0x7a, 0xd9, 0xd5, 0xb1, 0xf1, 0x5d, 0xbd, 0x00, 0x73, 0xc3,
	0x45, 0x94, 0xd5, 0xed, 0x21, 0xc0, 0x12, 0xb0, 0xed, 0xba, 0x77, 0xd3, 0x8a, 0xbb, 0x06, 0x51,
	0xc7, 0xe7, 0x2d, 0x3f, 0xe8, 0xa9, 0x40, 0xba, 0x2f, 0x47, 0x17, 0xa0, 0x3a, 0x7f, 0xd9, 0x41,
	0x42, 0xa3, 0xd4, 0x7e, 0x1f, 0xc2, 0x47, 0xc4, 0xc0, 0x0a, 0x84, 0x6b, 0xf4, 0x4c, 0x8a, 0x8d,
	0xf5, 0xba, 0xa9, 0xd0, 0x13, 0xa4, 0xfb, 0x26, 0x9c, 0x84, 0x68, 0x93, 0xd4, 0x1b, 0x94, 0xb3,
	0x08, 0x30, 0x61, 0x54, 0x7f, 0x84, 0x20, 0xe2, 0x07, 0xc4, 0x9f, 0x10, 0x44, 0x3d, 0x46, 0x5c,
	0x26, 0x63, 0xbc, 0x45, 0xbd, 0x6e, 0xea, 0x0d, 0x82, 0xd7, 0xe8, 0x5f, 0xd5, 0x4c, 0xcb, 0x0c,
	0x7a, 0x71, 0x97, 0xdd, 0xd2, 0xf9, 0x76, 0x31, 0x9f, 0x2d, 0xf8, 0x05, 0x15, 0xec, 0xf0, 0x47,
	0x04, 0x61, 0x6a, 0x55, 0xa5, 0x9a, 0x6b, 0xc7, 0xd2, 0xe7, 0x86, 0x17, 0x20, 0xe6, 0x31, 0xc2,
	0x1a, 0xfe, 0x89, 0xa2, 0x4c, 0x54, 0x97, 0x6f, 0x85, 0x2f, 0x11, 0x88, 0x8b, 0xd6, 0x7d, 0x4c,
	0xdd, 0xa6, 0x59, 0xa1, 0xb8, 0x02, 0x31, 0x31, 0xa7, 0xf1, 0x62, 0x70, 0xea, 0x43, 0xb7, 0x52,
	0x42, 0xb9, 0x0a, 0xc8, 0xa3, 0xdf, 0xb8, 0xf8, 0xfa, 0xfd, 0x5d, 0x28, 0x8d, 0x57, 0xf8, 0xcd,
	0xe8, 0xf0, 0xc0, 0x5a, 0xdb, 0x74, 0x3a, 0x5a, 0xdb, 0xef, 0xab, 0x8e, 0x56, 0x75, 0x49, 0xcb,
	0x74, 0xf0, 0x05, 0x82, 0xb9, 0x51, 0xa3, 0x14, 0xaf, 0x07, 0xa1, 0x7f, 0x73, 0x15, 0x24, 0x36,
	0xfe, 0xe4, 0x26, 0xf9, 0x2c, 0x71, 0x3e, 0xf3, 0x78, 0x96, 0xf3, 0x31, 0x1d, 0xc1, 0x45, 0xf0,
	0xc2, 0xc7, 0x00, 0xc1, 0x5c, 0xc4, 0x4b, 0x41, 0xc8, 0x2b, 0x33, 0x3c, 0x91, 0x1c, 0x0d, 0xca,
	0x2c, 0xcb, 0x3c, 0xcb, 0xa2, 0x3a, 0x3f, 0x94, 0x85, 0x48, 0x47, 0xdc, 0x80, 0x5b, 0x83, 0x33,
	0x02, 0x2f, 0x07, 0xc1, 0x46, 0x0c, 0xe0, 0xc4, 0xca, 0x38, 0x78, 0xb8, 0xc6, 0xea, 0xd8, 0x1a,
	0x57, 0xf8, 0x2e, 0x7c, 0x0a, 0x93, 0x03, 0x5f, 0x27, 0x4e, 0x5e, 0x09, 0x3b, 0x30, 0x98, 0x12,
	0xcb, 0x63, 0x50, 0x99, 0xf3, 0x0e, 0xcf, 0xb9, 0xa1, 0xae, 0x8d, 0xcb, 0xc9, 0x07, 0x82, 0xcc,
	0x5c, 0x8e, 0xf1, 0xbf, 0x33, 0xdb, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x83, 0x38, 0x12, 0xec,
	0x4e, 0x09, 0x00, 0x00,
}
