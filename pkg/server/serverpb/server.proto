syntax = "proto3";
package serverpb;

import "google/api/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "github.com/taku-k/ipdrawer/pkg/model/model.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";


message ListNetworkRequest {}

message ListNetworkResponse {
  repeated model.Network networks = 1;
}

message DrawIPRequest {
  string ip = 1 [(validator.field) = {regex: "|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
//  int32 mask = 2 [(validator.field) = {int_gt: -1, int_lt: 33}];
  int32 mask = 2;
  model.Tag pool_tag = 3;
  string name = 4;
  bool activate_immediately = 5;
}

message DrawIPResponse {
  string ip = 1;
  string message = 2;
}

message DrawIPEstimatingNetworkRequest {
  model.Tag pool_tag = 1;
  bool activate_immediately = 2;
}

message GetNetworkIncludingIPRequest {
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
}

message ActivateIPRequest {
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
  repeated model.Tag tags = 2;
}

message ActivateIPResponse {}

message DeactivateIPRequest {
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
}

message DeactivateIPResponse {}

message GetNetworkRequest {
  string ip = 1 [(validator.field) = {regex: "|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
  // int32 mask = 2 [(validator.field) = {int_gt: -1, int_lt: 33}];
  int32 mask = 2;
  string name = 3;
}

message GetEstimatedNetworkRequest {}

message GetNetworkResponse {
  string network = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])/([0-9]|1[0-9]|2[0-9]|3[0-2])$"}];
  repeated string default_gateways = 2;
  string broadcast = 3;
  string netmask = 4;
  repeated model.Tag tags = 5;
}

message CreateNetworkRequest {
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
  // int32 mask = 2 [(validator.field) = {int_gt: -1, int_lt: 33}];
  int32 mask = 2;
  repeated string default_gateways = 3;
  repeated model.Tag tags = 4;
  model.Network.Status status = 5;
}

message CreateNetworkResponse {}

message CreatePoolRequest {
  string ip = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
  // int32 mask = 2 [(validator.field) = {int_gt: -1, int_lt: 33}];
  int32 mask = 2;
  model.Pool pool = 3;
}

message CreatePoolResponse {}

message ListIPRequest {}

message ListIPResponse {
  repeated model.IPAddr ips = 1;
}

message ListTemporaryReservedIPRequest {}

message ListTemporaryReservedIPResponse {
  repeated model.IPAddr temporary_reserved_ips = 1;
}

message ListPoolRequest {}

message ListPoolResponse {
  repeated model.Pool pools = 1;
}

message GetIPInPoolRequest {
  string range_start = 1 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
  string range_end = 2 [(validator.field) = {regex: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"}];
}

message GetIPInPoolResponse {
  model.Pool pool = 1;
  repeated model.IPAddr ips = 2;
}


service NetworkServiceV0 {

  rpc ListNetwork (ListNetworkRequest) returns (ListNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v0/network/list"
    };
  }

  rpc GetEstimatedNetwork (GetEstimatedNetworkRequest) returns (GetNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v0/network"
    };
  };

  rpc DrawIP (DrawIPRequest) returns (DrawIPResponse) {
    option (google.api.http) = {
      get: "/api/v0/network/{ip}/{mask}/drawip"
      additional_bindings {
        get: "/api/v0/network/{name}/drawip"
      }
    };
  };

  rpc DrawIPEstimatingNetwork (DrawIPEstimatingNetworkRequest) returns (DrawIPResponse) {
    option (google.api.http) = {
      get: "/api/v0/drawip"
    };
  };

  rpc GetNetwork (GetNetworkRequest) returns (GetNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v0/network/{ip}/{mask}"
      additional_bindings {
        get: "/api/v0/network/{name}"
      }
    };
  };

  rpc CreateNetwork (CreateNetworkRequest) returns (CreateNetworkResponse) {
    option (google.api.http) = {
      post: "/api/v0/network/{ip}/{mask}/create"
      body: "*"
    };
  };

  rpc CreatePool (CreatePoolRequest) returns (CreatePoolResponse) {
    option (google.api.http) = {
      post: "/api/v0/network/{ip}/{mask}/pool/create"
      body: "*"
    };
  };

}

service IPServiceV0 {

  rpc GetNetworkIncludingIP (GetNetworkIncludingIPRequest) returns (GetNetworkResponse) {
    option (google.api.http) = {
      get: "/api/v0/ip/{ip}/network"
    };
  };

  rpc ActivateIP (ActivateIPRequest) returns (ActivateIPResponse) {
    option (google.api.http) = {
      post: "/api/v0/ip/{ip}/activate"
      body: "*"
    };
  };

  rpc DeactivateIP (DeactivateIPRequest) returns (DeactivateIPResponse) {
    option (google.api.http) = {
      post: "/api/v0/ip/{ip}/deactivate"
    };
  };

  rpc ListIP (ListIPRequest) returns (ListIPResponse) {
    option (google.api.http) = {
      get: "/api/v0/ip/list"
    };
  };

  rpc ListTemporaryReservedIP (ListTemporaryReservedIPRequest) returns (ListTemporaryReservedIPResponse) {
    option (google.api.http) = {
      get: "/api/v0/ip/temporary_reserved/list"
    };
  };

}

service PoolServiceV0 {

  rpc ListPool (ListPoolRequest) returns (ListPoolResponse) {
    option (google.api.http) = {
      get: "/api/v0/pool/list"
    };
  };

  rpc GetIPInPool(GetIPInPoolRequest) returns (GetIPInPoolResponse) {
    option (google.api.http) = {
      get: "/api/v0/pool/{range_start}/{range_end}/ip"
    };
  };

}
